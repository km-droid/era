import type { NextApiRequest, NextApiResponse } from 'next'
import { Datastore } from '@google-cloud/datastore'

const datastore = new Datastore()

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method === 'GET') {
    try {
      const query = datastore.createQuery('Task')
      const [tasks] = await datastore.runQuery(query)

      const taskStats = tasks.reduce((acc: any, task: any) => {
        if (!acc[task.name]) {
          acc[task.name] = { completed: 0, pending: 0 }
        }
        if (task.completed) {
          acc[task.name].completed++
        } else {
          acc[task.name].pending++
        }
        return acc
      }, {})

      const formattedStats = Object.entries(taskStats).map(([name, stats]: [string, any]) => ({
        name,
        completed: stats.completed,
        pending: stats.pending
      }))

      res.status(200).json(formattedStats)
    } catch (error) {
      console.error('Error fetching task stats:', error)
      res.status(500).json({ error: 'Error fetching task stats' })
    }
  } else {
    res.setHeader('Allow', ['GET'])
    res.status(405).end(`Method ${req.method} Not Allowed`)
  }
}

//*teams
import type { NextApiRequest, NextApiResponse } from 'next'
import { Datastore } from '@google-cloud/datastore'

const datastore = new Datastore()

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  if (req.method === 'GET') {
    try {
      const query = datastore.createQuery('Task')
      const [tasks] = await datastore.runQuery(query)

      const teamStats = tasks.reduce((acc: any, task: any) => {
        if (!acc[task.teamId]) {
          acc[task.teamId] = { completed: 0, pending: 0 }
        }
        if (task.completed) {
          acc[task.teamId].completed++
        } else {
          acc[task.teamId].pending++
        }
        return acc
      }, {})

      const formattedStats = Object.entries(teamStats).map(([teamId, stats]: [string, any]) => ({
        teamId,
        completed: stats.completed,
        pending: stats.pending
      }))

      res.status(200).json(formattedStats)
    } catch (error) {
      console.error('Error fetching team stats:', error)
      res.status(500).json({ error: 'Error fetching team stats' })
    }
  } else {
    res.setHeader('Allow', ['GET'])
    res.status(405).end(`Method ${req.method} Not Allowed`)
  }
}
