import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Link from 'next/link'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faArrowLeft, faInfoCircle, faCopy, faCircle } from '@fortawesome/free-solid-svg-icons'
import Layout from '../../components/Layout'
import { ServiceCatalog, ServiceHealth } from '../../types'

export default function AppDetails() {
  const router = useRouter()
  const { appName } = router.query

  const [activeTab, setActiveTab] = useState('overview')
  const [appDetails, setAppDetails] = useState<ServiceCatalog | null>(null)
  const [healthData, setHealthData] = useState<ServiceHealth[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    if (appName && typeof appName === 'string') {
      fetchAppDetails(appName)
      fetchHealthData(appName)
    }
  }, [appName])

  const fetchAppDetails = async (name: string) => {
    try {
      const response = await fetch(`/api/services/${name}`)
      if (!response.ok) {
        throw new Error('Failed to fetch app details')
      }
      const data = await response.json()
      setAppDetails(data)
      setLoading(false)
    } catch (err) {
      setError('Error fetching app details. Please try again later.')
      setLoading(false)
    }
  }

  const fetchHealthData = async (name: string) => {
    try {
      const response = await fetch(`/api/services/${name}/health`)
      if (!response.ok) {
        throw new Error('Failed to fetch health data')
      }
      const data = await response.json()
      setHealthData(data)
    } catch (err) {
      console.error('Error fetching health data:', err)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
      .then(() => alert('Copied to clipboard!'))
      .catch(err => console.error('Failed to copy:', err))
  }

  if (loading) return <Layout username="John Doe"><div>Loading...</div></Layout>
  if (error) return <Layout username="John Doe"><div className="text-red-500">{error}</div></Layout>
  if (!appDetails) return <Layout username="John Doe"><div>App not found</div></Layout>

  return (
    <Layout username="John Doe">
      <div className="space-y-6">
        <div className="flex items-center space-x-4">
          <Link href="/" className="text-blue-600 hover:text-blue-800 transition-colors">
            <FontAwesomeIcon icon={faArrowLeft} className="mr-2" />
            Back
          </Link>
          <h1 className="text-3xl font-bold">{appDetails.appName}</h1>
        </div>

        <div className="border-b border-gray-200">
          <nav className="-mb-px flex space-x-8">
            {['Overview', 'SLOs', 'Useful Links', 'Dependencies', 'Health'].map((tab) => (
              <button
                key={tab}
                onClick={() => setActiveTab(tab.toLowerCase().replace(' ', '-'))}
                className={`${
                  activeTab === tab.toLowerCase().replace(' ', '-')
                    ? 'border-blue-500 text-blue-600'
                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
              >
                {tab}
              </button>
            ))}
          </nav>
        </div>

        {activeTab === 'overview' && (
          <div className="space-y-4">
            <table className="w-full">
              <tbody>
                {Object.entries(appDetails).map(([key, value]) => (
                  <tr key={key} className="hover:bg-gray-50">
                    <td className="py-2 font-medium">{key}</td>
                    <td className="py-2">
                      {key === 'appDescription' || key === 'impact' ? (
                        <div className="relative group">
                          <FontAwesomeIcon icon={faInfoCircle} className="text-blue-500 cursor-pointer" />
                          <div className="absolute z-10 invisible group-hover:visible bg-white text-gray-800 p-2 rounded shadow-lg">
                            {value as string}
                          </div>
                        </div>
                      ) : Array.isArray(value) ? (
                        value.join(', ')
                      ) : typeof value === 'object' ? (
                        JSON.stringify(value)
                      ) : (
                        value as string
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {activeTab === 'slos' && (
          <div className="space-y-4">
            <table className="w-full">
              <tbody>
                {Object.entries(appDetails.slos).map(([key, value]) => (
                  <tr key={key} className="hover:bg-gray-50">
                    <td className="py-2 font-medium">{key}</td>
                    <td className="py-2">{value}</td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {activeTab === 'useful-links' && (
          <div className="space-y-4">
            <table className="w-full">
              <tbody>
                {Object.entries(appDetails.usefulLinks).map(([key, value]) => (
                  <tr key={key} className="hover:bg-gray-50 group">
                    <td className="py-2 font-medium">{key}</td>
                    <td className="py-2">
                      <a href={value} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                        {value}
                      </a>
                    </td>
                    <td className="py-2">
                      <FontAwesomeIcon
                        icon={faCopy}
                        className="text-gray-400 cursor-pointer invisible group-hover:visible"
                        onClick={() => copyToClipboard(value)}
                      />
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {activeTab === 'dependencies' && (
          <div className="space-y-4">
            <ul>
              {appDetails.dependencies.map((dep) => (
                <li key={dep} className="flex items-center space-x-2 py-2 hover:bg-gray-50">
                  <FontAwesomeIcon icon={faCircle} className="text-blue-500 text-xs" />
                  <span>{dep}</span>
                </li>
              ))}
            </ul>
          </div>
        )}

        {activeTab === 'health' && (
          <div className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="bg-gray-100 p-4 rounded-lg">
                <h3 className="text-lg font-semibold mb-2">Healthy</h3>
                <div className="text-3xl font-bold text-green-500">
                  {healthData[healthData.length - 1]?.status === 'healthy' ? 'Yes' : 'No'}
                </div>
              </div>
              <div className="bg-gray-100 p-4 rounded-lg">
                <h3 className="text-lg font-semibold mb-2">Error Budget</h3>
                <div className="text-3xl font-bold text-blue-500">
                  {healthData[healthData.length - 1]?.errorBudget.toFixed(2)}%
                </div>
              </div>
            </div>
            <div className="space-y-4">
              <h3 className="text-xl font-semibold">Last 7 Days Metrics</h3>
              <table className="w-full">
                <thead>
                  <tr className="bg-gray-50">
                    <th className="py-2 px-4 text-left">Metric</th>
                    <th className="py-2 px-4 text-left">Value</th>
                  </tr>
                </thead>
                <tbody>
                  {healthData[healthData.length - 1]?.metrics && Object.entries(healthData[healthData.length - 1].metrics).map(([key, value]) => (
                    <tr key={key} className="hover:bg-gray-50">
                      <td className="py-2 px-4 font-medium">{key}</td>
                      <td className="py-2 px-4">{value}</td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
    </Layout>
  )
}
