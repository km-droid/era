package main

import (
	"context"
	"encoding/csv"
	"fmt"
	"log"
	"os"

	"cloud.google.com/go/monitoring/apiv3"
	resourcemanager "cloud.google.com/go/resourcemanager/apiv3"
	"google.golang.org/api/iterator"
	monitoringpb "google.golang.org/genproto/googleapis/monitoring/v3"
	resmanagerpb "google.golang.org/genproto/googleapis/cloud/resourcemanager/v3"
)

func main() {
	ctx := context.Background()

	// 1. Create a Resource Manager client to list projects.
	rmClient, err := resourcemanager.NewProjectsClient(ctx)
	if err != nil {
		log.Fatalf("Failed to create Resource Manager client: %v", err)
	}
	defer rmClient.Close()

	// 2. Create a Cloud Monitoring client for listing alert policies.
	alertClient, err := monitoring.NewAlertPolicyClient(ctx)
	if err != nil {
		log.Fatalf("Failed to create AlertPolicy client: %v", err)
	}
	defer alertClient.Close()

	// Prepare a CSV file to write results.
	csvFile, err := os.Create("alert_policies.csv")
	if err != nil {
		log.Fatalf("Failed to create CSV file: %v", err)
	}
	defer csvFile.Close()

	writer := csv.NewWriter(csvFile)
	defer writer.Flush()

	// Write CSV header.
	if err := writer.Write([]string{"ProjectID", "AlertPolicyCount"}); err != nil {
		log.Fatalf("Failed to write CSV header: %v", err)
	}

	// 3. List projects the caller has access to.
	req := &resmanagerpb.ListProjectsRequest{}
	it := rmClient.ListProjects(ctx, req)

	for {
		proj, err := it.Next()
		if err == iterator.Done {
			break
		}
		if err != nil {
			log.Fatalf("Error listing projects: %v", err)
		}

		projectID := proj.GetProjectId()
		if projectID == "" {
			// In some cases, if the user has "list" access but partial permissions,
			// there might be a blank projectId or partial project resource. Skip if empty.
			continue
		}

		// 4. List alert policies for this project.
		parent := fmt.Sprintf("projects/%s", projectID)
		apReq := &monitoringpb.ListAlertPoliciesRequest{Parent: parent}

		alertCount := 0
		alertIt := alertClient.ListAlertPolicies(ctx, apReq)
		for {
			_, err := alertIt.Next()
			if err == iterator.Done {
				break
			}
			if err != nil {
				log.Printf("Warning: unable to list alert policies for project %s: %v", projectID, err)
				break
			}
			alertCount++
		}

		// 5. Write row to CSV.
		row := []string{projectID, fmt.Sprintf("%d", alertCount)}
		if err := writer.Write(row); err != nil {
			log.Printf("Failed to write row for project %s: %v", projectID, err)
		}

		log.Printf("Project: %s, AlertPolicyCount: %d\n", projectID, alertCount)
	}

	log.Println("CSV file 'alert_policies.csv' created successfully.")
}

