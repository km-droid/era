//*id.tsx
import React from 'react'
import { useRouter } from 'next/router'
import { useQuery } from '@tanstack/react-query'
import Layout from '@/components/Layout'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faStore, faUser, faEnvelope, faPhone, faDollarSign, faRulerCombined } from '@fortawesome/free-solid-svg-icons'
import { getStore, getTasks, getHardwareInventory, getSoftwareInstallations } from '@/lib/api'

export default function StoreDetails() {
  const router = useRouter()
  const { id } = router.query

  const { data: store, isLoading: storeLoading } = useQuery({
    queryKey: ['store', id],
    queryFn: () => getStore(id as string),
    enabled: !!id,
  })

  const { data: tasks } = useQuery({
    queryKey: ['tasks', id],
    queryFn: () => getTasks(id as string),
    enabled: !!id,
  })

  const { data: hardware } = useQuery({
    queryKey: ['hardware', id],
    queryFn: () => getHardwareInventory(id as string),
    enabled: !!id,
  })

  const { data: software } = useQuery({
    queryKey: ['software', id],
    queryFn: () => getSoftwareInstallations(id as string),
    enabled: !!id,
  })

  if (storeLoading) return <Layout><div className="text-white">Loading...</div></Layout>
  if (!store) return <Layout><div className="text-white">Store not found</div></Layout>

  return (
    <Layout>
      <div className="p-6 space-y-6">
        <h1 className="text-2xl font-semibold text-white">{store.name} Details</h1>
        <div className="bg-gray-800 shadow-md rounded-lg p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="flex items-center">
              <FontAwesomeIcon icon={faStore} className="text-blue-500 mr-2" />
              <span className="text-gray-300">Store Number: {store.storeNo}</span>
            </div>
            <div className="flex items-center">
              <FontAwesomeIcon icon={faUser} className="text-blue-500 mr-2" />
              <span className="text-gray-300">Manager: {store.manager}</span>
            </div>
            <div className="flex items-center">
              <FontAwesomeIcon icon={faEnvelope} className="text-blue-500 mr-2" />
              <span className="text-gray-300">Email: {store.contactEmail}</span>
            </div>
            <div className="flex items-center">
              <FontAwesomeIcon icon={faPhone} className="text-blue-500 mr-2" />
              <span className="text-gray-300">Phone: {store.contactPhone}</span>
            </div>
            <div className="flex items-center">
              <FontAwesomeIcon icon={faRulerCombined} className="text-blue-500 mr-2" />
              <span className="text-gray-300">Size: {store.size} sq ft</span>
            </div>
            <div className="flex items-center">
              <FontAwesomeIcon icon={faDollarSign} className="text-blue-500 mr-2" />
              <span className="text-gray-300">Annual Revenue: ${store.annualRevenue.toLocaleString()}</span>
            </div>
          </div>
          <div className="mt-4">
            <h2 className="text-xl font-semibold text-white mb-2">Address</h2>
            <p className="text-gray-300">
              {store.address.street}, {store.address.city}, {store.address.state} {store.address.zipcode}, {store.address.country}
            </p>
          </div>
        </div>

        <div className="bg-gray-800 shadow-md rounded-lg p-6">
          <h2 className="text-xl font-semibold text-white mb-4">Rollout Progress</h2>
          <div className="flex justify-between items-center">
            {['Hardware Requested', 'Hardware Delivered', 'Software Install', 'Live'].map((phase, index) => (
              <div key={phase} className="flex flex-col items-center">
                <div 
                  className={`w-8 h-8 rounded-full mb-2 ${
                    index < store.rolloutPhase ? 'bg-green-500' :
                    index === store.rolloutPhase ? 'bg-yellow-500' :
                    'bg-gray-600'
                  }`}
                />
                <div className="text-xs text-center max-w-[80px] text-gray-400">{phase}</div>
              </div>
            ))}
          </div>
        </div>

        {/* Tasks, Hardware Inventory, and Software Installations sections would go here */}
        {/* For brevity, I'm not including these sections in this example, but they would follow a similar pattern */}
      </div>
    </Layout>
  )
}

//*_app.tsx
import '@/styles/globals.css'
import type { AppProps } from 'next/app'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

const queryClient = new QueryClient()

export default function App({ Component, pageProps }: AppProps) {
  return (
    <QueryClientProvider client={queryClient}>
      <Component {...pageProps} />
    </QueryClientProvider>
  )
}

//* index.tsx
import React from 'react'
import { useQuery, QueryClient, QueryClientProvider } from '@tanstack/react-query'
import Layout from '@/components/Layout'
import MetricCard from '@/components/MetricCard'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faRocket, faBox, faServer, faDesktop, faSort, faSearch, faFilter } from '@fortawesome/free-solid-svg-icons'
import { getStores, getMetrics } from '@/lib/api'
import Link from 'next/link'

// Create a client
const queryClient = new QueryClient()

function Dashboard() {
  const { data: stores, isLoading: storesLoading } = useQuery({ queryKey: ['stores'], queryFn: getStores })
  const { data: metrics } = useQuery({ queryKey: ['metrics'], queryFn: getMetrics })

  const [search, setSearch] = React.useState('')
  const [sortColumn, setSortColumn] = React.useState('storeNo')
  const [sortDirection, setSortDirection] = React.useState('asc')
  const [phaseFilter, setPhaseFilter] = React.useState('')
  const [statusFilter, setStatusFilter] = React.useState('')

  const filteredAndSortedStores = React.useMemo(() => {
    if (!stores) return []

    return stores
      .filter(store => 
        (store.storeNo.toString().includes(search) ||
        store.address.street.toLowerCase().includes(search.toLowerCase())) &&
        (phaseFilter ? store.rolloutPhase === phaseFilter : true) &&
        (statusFilter ? store.status === statusFilter : true)
      )
      .sort((a, b) => {
        if (a[sortColumn] < b[sortColumn]) return sortDirection === 'asc' ? -1 : 1
        if (a[sortColumn] > b[sortColumn]) return sortDirection === 'asc' ? 1 : -1
        return 0
      })
  }, [stores, search, sortColumn, sortDirection, phaseFilter, statusFilter])

  const handleSort = (column: string) => {
    if (column === sortColumn) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortColumn(column)
      setSortDirection('asc')
    }
  }

  return (
    <Layout>
      <div className="p-6 space-y-6">
        <div className="grid grid-cols-1 gap-6 mb-6 lg:grid-cols-4">
          <MetricCard title="Live" value={metrics?.live || 0} icon={<FontAwesomeIcon icon={faRocket} />} color="text-blue-500" />
          <MetricCard title="Onboarded" value={metrics?.onboarded || 0} icon={<FontAwesomeIcon icon={faBox} />} color="text-yellow-500" />
          <MetricCard title="Hardware Acquired" value={metrics?.hardwareAcquired || 0} icon={<FontAwesomeIcon icon={faServer} />} color="text-purple-500" />
          <MetricCard title="Software Installed" value={metrics?.softwareInstalled || 0} icon={<FontAwesomeIcon icon={faDesktop} />} color="text-green-500" />
        </div>

        <div className="flex items-center mb-6 space-x-4">
          <div className="relative flex-grow">
            <input
              type="text"
              placeholder="Search Stores ...."
              className="w-full px-4 py-2 pl-10 text-gray-300 bg-gray-800 border border-gray-700 rounded-md focus:outline-none focus:border-blue-500"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
            />
            <FontAwesomeIcon icon={faSearch} className="absolute left-3 top-3 text-gray-400" />
          </div>
          <select
            className="px-4 py-2 text-gray-300 bg-gray-800 border border-gray-700 rounded-md focus:outline-none focus:border-blue-500"
            value={phaseFilter}
            onChange={(e) => setPhaseFilter(e.target.value)}
          >
            <option value="">All Phases</option>
            <option value="Planning">Planning</option>
            <option value="Hardware">Hardware</option>
            <option value="Software">Software</option>
            <option value="Training">Training</option>
            <option value="Live">Live</option>
          </select>
          <select
            className="px-4 py-2 text-gray-300 bg-gray-800 border border-gray-700 rounded-md focus:outline-none focus:border-blue-500"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="">All Statuses</option>
            <option value="Not Started">Not Started</option>
            <option value="In Progress">In Progress</option>
            <option value="Completed">Completed</option>
          </select>
        </div>

        <div className="bg-gray-800 shadow-md rounded-lg overflow-hidden">
          <div className="px-6 py-4 border-b border-gray-700">
            <h2 className="text-xl font-semibold text-white">Store Details</h2>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full text-left text-gray-300">
              <thead className="text-xs uppercase bg-gray-700 text-gray-400">
                <tr>
                  <th className="px-6 py-3 cursor-pointer" onClick={() => handleSort('storeNo')}>
                    Store Number
                    {sortColumn === 'storeNo' && (
                      <FontAwesomeIcon icon={faSort} className="ml-1" />
                    )}
                  </th>
                  <th className="px-6 py-3">Location</th>
                  <th className="px-6 py-3 cursor-pointer" onClick={() => handleSort('rolloutPhase')}>
                    Phase
                    {sortColumn === 'rolloutPhase' && (
                      <FontAwesomeIcon icon={faSort} className="ml-1" />
                    )}
                  </th>
                  <th className="px-6 py-3 cursor-pointer" onClick={() => handleSort('status')}>
                    Status
                    {sortColumn === 'status' && (
                      <FontAwesomeIcon icon={faSort} className="ml-1" />
                    )}
                  </th>
                  <th className="px-6 py-3">Actions</th>
                </tr>
              </thead>
              <tbody>
                {storesLoading ? (
                  <tr>
                    <td colSpan={5} className="px-6 py-4 text-center">Loading...</td>
                  </tr>
                ) : filteredAndSortedStores.length === 0 ? (
                  <tr>
                    <td colSpan={5} className="px-6 py-4 text-center">No stores found</td>
                  </tr>
                ) : (
                  filteredAndSortedStores.map((store) => (
                    <tr key={store.id} className="border-b border-gray-700">
                      <td className="px-6 py-4 font-medium">{store.storeNo}</td>
                      <td className="px-6 py-4">{store.address.street}</td>
                      <td className="px-6 py-4">{store.rolloutPhase}</td>
                      <td className="px-6 py-4">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                          store.status === 'Completed' ? 'bg-green-100 text-green-800' :
                          store.status === 'In Progress' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-red-100 text-red-800'
                        }`}>
                          {store.status}
                        </span>
                      </td>
                      <td className="px-6 py-4">
                        <Link href={`/stores/${store.id}`} className="text-blue-500 hover:text-blue-600">View</Link>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </Layout>
  )
}

// Wrap the component with QueryClientProvider
export default function DashboardPage() {
  return (
    <QueryClientProvider client={queryClient}>
      <Dashboard />
    </QueryClientProvider>
  )
}

//*seed-emulator
const { Datastore } = require('@google-cloud/datastore')

const datastore = new Datastore({
  projectId: 'your-project-id',
  apiEndpoint: process.env.DATASTORE_EMULATOR_HOST,
})

async function seedData() {
  const stores = [
    {
      storeNo: '001',
      name: 'Downtown Store',
      address: {
        street: '123 Main St',
        city: 'Metropolis',
        state: 'NY',
        zipcode: '10001',
      },
      rolloutPhase: 'Hardware',
      status: 'In Progress',
      manager: 'John Doe',
      contactEmail: 'john@example.com',
      contactPhone: '555-1234',
      size: 5000,
      annualRevenue: 1000000,
    },
    // Add more sample stores here
  ]

  for (const store of stores) {
    const key = datastore.key('Store')
    const entity = {
      key: key,
      data: store,
    }
    await datastore.save(entity)
    console.log(`Added store: ${store.name}`)
  }

  console.log('Seeding complete')
}

seedData().catch(console.error)

//* api/store.ts
import { NextApiRequest, NextApiResponse } from 'next'
import { Datastore } from '@google-cloud/datastore'

const datastore = new Datastore({
  projectId: 'your-project-id',
  apiEndpoint: process.env.DATASTORE_EMULATOR_HOST,
})

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    try {
      const query = datastore.createQuery('Store')
      const [stores] = await datastore.runQuery(query)
      const formattedStores = stores.map(store => ({
        id: store[datastore.KEY].id,
        storeNo: store.storeNo,
        name: store.name,
        address: store.address,
        rolloutPhase: store.rolloutPhase,
        status: store.status,
        manager: store.manager,
        contactEmail: store.contactEmail,
        contactPhone: store.contactPhone,
        size: store.size,
        annualRevenue: store.annualRevenue
      }))
      res.status(200).json(formattedStores)
    } catch (error) {
      console.error('Error fetching stores:', error)
      res.status(500).json({ error: 'Error fetching stores' })
    }
  } else if (req.method === 'POST') {
    try {
      const key = datastore.key('Store')
      const entity = {
        key: key,
        data: req.body
      }
      await datastore.save(entity)
      res.status(201).json({ message: 'Store added successfully' })
    } catch (error) {
      console.error('Error adding store:', error)
      res.status(500).json({ error: 'Error adding store' })
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' })
  }
}



//*/pages/api/stores.ts
import { NextApiRequest, NextApiResponse } from 'next'
import { Datastore } from '@google-cloud/datastore'

const datastore = new Datastore()

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    try {
      const query = datastore.createQuery('Store')
      const [stores] = await datastore.runQuery(query)
      const formattedStores = stores.map(store => ({
        id: store[datastore.KEY].id,
        storeNo: store.storeNo,
        name: store.name,
        address: store.address,
        rolloutPhase: store.rolloutPhase,
        status: store.status,
        manager: store.manager,
        contactEmail: store.contactEmail,
        contactPhone: store.contactPhone,
        size: store.size,
        annualRevenue: store.annualRevenue
      }))
      res.status(200).json(formattedStores)
    } catch (error) {
      res.status(500).json({ error: 'Error fetching stores' })
    }
  } else if (req.method === 'POST') {
    try {
      const key = datastore.key('Store')
      const entity = {
        key: key,
        data: req.body
      }
      await datastore.save(entity)
      res.status(201).json({ message: 'Store added successfully' })
    } catch (error) {
      res.status(500).json({ error: 'Error adding store' })
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' })
  }
}

//*import { NextApiRequest, NextApiResponse } from 'next'
import { Datastore } from '@google-cloud/datastore'

const datastore = new Datastore()

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'GET') {
    try {
      const query = datastore.createQuery('Store')
      const [stores] = await datastore.runQuery(query)
      const formattedStores = stores.map(store => ({
        id: store[datastore.KEY].id,
        storeNo: store.storeNo,
        name: store.name,
        address: store.address,
        rolloutPhase: store.rolloutPhase,
        status: store.status,
        manager: store.manager,
        contactEmail: store.contactEmail,
        contactPhone: store.contactPhone,
        size: store.size,
        annualRevenue: store.annualRevenue
      }))
      res.status(200).json(formattedStores)
    } catch (error) {
      res.status(500).json({ error: 'Error fetching stores' })
    }
  } else if (req.method === 'POST') {
    try {
      const key = datastore.key('Store')
      const entity = {
        key: key,
        data: req.body
      }
      await datastore.save(entity)
      res.status(201).json({ message: 'Store added successfully' })
    } catch (error) {
      res.status(500).json({ error: 'Error adding store' })
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' })
  }
}

//*lib/api.ts
export async function getStores() {
  const response = await fetch('/api/stores')
  if (!response.ok) {
    throw new Error('Failed to fetch stores')
  }
  return response.json()
}

export async function addStore(storeData: any) {
  const response = await fetch('/api/stores', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(storeData),
  })
  if (!response.ok) {
    throw new Error('Failed to add store')
  }
  return response.json()
}

export async function getMetrics() {
  // This is a placeholder. You should create a separate API route for metrics.
  return {
    live: 10,
    onboarded: 20,
    hardwareAcquired: 15,
    softwareInstalled: 12
  }
}

export async function getStore(id: string) {
  // This is a placeholder. You should create a separate API route for fetching a single store.
  const stores = await getStores()
  return stores.find(store => store.id === id) || null
}

export async function getStoreStats() {
  // This is a placeholder. You should create a separate API route for store stats.
  return {
    storesByStatus: [
      { status: 'Not Started', count: 5 },
      { status: 'In Progress', count: 10 },
      { status: 'Completed', count: 15 }
    ],
    averageRolloutTime: 30
  }
}

export async function seedDatabase() {
  // This is a placeholder. You should create a separate API route for seeding the database.
  console.log('Seeding database...')
  // Add your seeding logic here
  console.log('Database seeded successfully')
}

//* next.config.ts
/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  webpack: (config, { isServer }) => {
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        net: false,
        tls: false,
        fs: false,
      }
    }
    return config
  },
}

module.exports = nextConfig

//* pages/_api.ts
import '@/styles/globals.css'
import type { AppProps } from 'next/app'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

const queryClient = new QueryClient()

export default function App({ Component, pageProps }: AppProps) {
  return (
    <QueryClientProvider client={queryClient}>
      <Component {...pageProps} />
    </QueryClientProvider>
  )
}

//* lib/utils.tsx
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

//* card.tsx
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border border-gray-700 bg-gray-800 text-gray-100 shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-gray-400", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

//*tooltip
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border border-gray-700 bg-gray-800 px-3 py-1.5 text-sm text-gray-100 shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

//*page/_app.tsx

import '@/styles/globals.css'
import type { AppProps } from 'next/app'
import { QueryClient, QueryClientProvider } from '@tanstack/react-query'

const queryClient = new QueryClient()

export default function App({ Component, pageProps }: AppProps) {
  return (
    <QueryClientProvider client={queryClient}>
      <Component {...pageProps} />
    </QueryClientProvider>
  )
}



//pages/seed.tsx
import React, { useState } from 'react'
import { useMutation } from '@tanstack/react-query'
import Layout from '@/components/Layout'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faDatabase } from '@fortawesome/free-solid-svg-icons'
import { seedDatabase } from '@/lib/api'

export default function SeedDatabase() {
  const [seeding, setSeeding] = useState(false)

  const mutation = useMutation({
    mutationFn: seedDatabase,
    onMutate: () => {
      setSeeding(true)
    },
    onSettled: () => {
      setSeeding(false)
    },
  })

  const handleSeed = () => {
    mutation.mutate()
  }

  return (
    <Layout>
      <div className="p-6 space-y-6">
        <h1 className="text-2xl font-semibold text-white">Seed Database</h1>
        <div className="bg-gray-800 shadow-md rounded-lg p-6">
          <p className="text-gray-300 mb-4">
            Click the button below to seed the database with sample data for testing and demonstration purposes.
          </p>
          <button
            onClick={handleSeed}
            disabled={seeding}
            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline disabled:opacity-50"
          >
            <FontAwesomeIcon icon={faDatabase} className="mr-2" />
            {seeding ? 'Seeding...' : 'Seed Database'}
          </button>
          {mutation.isSuccess && (
            <p className="text-green-500 mt-4">Database seeded successfully!</p>
          )}
          {mutation.isError && (
            <p className="text-red-500 mt-4">Error seeding database: {mutation.error.message}</p>
          )}
        </div>
      </div>
    </Layout>
  )
}

//*metric card
import React from 'react'

interface MetricCardProps {
  title: string
  value: number
  icon: React.ReactNode
  color: string
}

export default function MetricCard({ title, value, icon, color }: MetricCardProps) {
  return (
    <div className="bg-gray-800 border border-gray-700 rounded-lg p-5">
      <div className="flex items-center">
        <div className={`flex-shrink-0 ${color}`}>
          {icon}
        </div>
        <div className="ml-5 w-0 flex-1">
          <dl>
            <dt className="text-sm font-medium text-gray-400 truncate">{title}</dt>
            <dd>
              <div className="text-lg font-medium text-white">{value.toLocaleString()}</div>
            </dd>
          </dl>
        </div>
      </div>
    </div>
  )
}

//* src/compo/layout.tsx
import React from 'react'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faHome, faChartBar, faPlus } from '@fortawesome/free-solid-svg-icons'

export default function Layout({ children }: { children: React.ReactNode }) {
  const router = useRouter()

  const isActive = (path: string) => router.pathname === path

  return (
    <div className="flex h-screen bg-gray-900">
      <aside className="w-64 bg-gray-800">
        <div className="flex items-center justify-center h-16 bg-gray-900">
          <span className="text-white text-2xl font-semibold">Edge Rollout</span>
        </div>
        <nav className="mt-5">
          <Link href="/" className={`flex items-center px-6 py-2 text-gray-100 ${isActive('/') ? 'bg-gray-700' : 'hover:bg-gray-700'}`}>
            <FontAwesomeIcon icon={faHome} className="mr-3" />
            Home
          </Link>
          <Link href="/stats" className={`flex items-center px-6 py-2 mt-2 text-gray-100 ${isActive('/stats') ? 'bg-gray-700' : 'hover:bg-gray-700'}`}>
            <FontAwesomeIcon icon={faChartBar} className="mr-3" />
            Stats
          </Link>
          <Link href="/onboard" className={`flex items-center px-6 py-2 mt-2 text-gray-100 ${isActive('/onboard') ? 'bg-gray-700' : 'hover:bg-gray-700'}`}>
            <FontAwesomeIcon icon={faPlus} className="mr-3" />
            Onboard
          </Link>
        </nav>
      </aside>
      <main className="flex-1 overflow-x-hidden overflow-y-auto bg-gray-900">
        <div className="container mx-auto px-6 py-8">
          {children}
        </div>
      </main>
    </div>
  )
}
//* src/pages/index.tsx
import React, { useState, useMemo } from 'react'
import { useQuery } from '@tanstack/react-query'
import Layout from '@/components/Layout'
import MetricCard from '@/components/MetricCard'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faRocket, faBox, faServer, faDesktop, faSort, faSearch, faFilter } from '@fortawesome/free-solid-svg-icons'
import { getStores, getMetrics } from '@/lib/api'
import Link from 'next/link'

export default function Dashboard() {
  const { data: stores, isLoading: storesLoading } = useQuery({ queryKey: ['stores'], queryFn: getStores })
  const { data: metrics } = useQuery({ queryKey: ['metrics'], queryFn: getMetrics })

  const [search, setSearch] = useState('')
  const [sortColumn, setSortColumn] = useState('storeNo')
  const [sortDirection, setSortDirection] = useState('asc')
  const [phaseFilter, setPhaseFilter] = useState('')
  const [statusFilter, setStatusFilter] = useState('')

  const filteredAndSortedStores = useMemo(() => {
    if (!stores) return []

    return stores
      .filter(store => 
        (store.storeNo.toString().includes(search) ||
        store.address.street.toLowerCase().includes(search.toLowerCase())) &&
        (phaseFilter ? store.rolloutPhase === phaseFilter : true) &&
        (statusFilter ? store.status === statusFilter : true)
      )
      .sort((a, b) => {
        if (a[sortColumn] < b[sortColumn]) return sortDirection === 'asc' ? -1 : 1
        if (a[sortColumn] > b[sortColumn]) return sortDirection === 'asc' ? 1 : -1
        return 0
      })
  }, [stores, search, sortColumn, sortDirection, phaseFilter, statusFilter])

  const handleSort = (column: string) => {
    if (column === sortColumn) {
      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc')
    } else {
      setSortColumn(column)
      setSortDirection('asc')
    }
  }

  return (
    <Layout>
      <div className="p-6 space-y-6">
        <div className="grid grid-cols-1 gap-6 mb-6 lg:grid-cols-4">
          <MetricCard title="Live" value={metrics?.live || 0} icon={<FontAwesomeIcon icon={faRocket} />} color="text-blue-500" />
          <MetricCard title="Onboarded" value={metrics?.onboarded || 0} icon={<FontAwesomeIcon icon={faBox} />} color="text-yellow-500" />
          <MetricCard title="Hardware Acquired" value={metrics?.hardwareAcquired || 0} icon={<FontAwesomeIcon icon={faServer} />} color="text-purple-500" />
          <MetricCard title="Software Installed" value={metrics?.softwareInstalled || 0} icon={<FontAwesomeIcon icon={faDesktop} />} color="text-green-500" />
        </div>

        <div className="flex items-center mb-6 space-x-4">
          <div className="relative flex-grow">
            <input
              type="text"
              placeholder="Search Stores ...."
              className="w-full px-4 py-2 pl-10 text-gray-300 bg-gray-800 border border-gray-700 rounded-md focus:outline-none focus:border-blue-500"
              value={search}
              onChange={(e) => setSearch(e.target.value)}
            />
            <FontAwesomeIcon icon={faSearch} className="absolute left-3 top-3 text-gray-400" />
          </div>
          <select
            className="px-4 py-2 text-gray-300 bg-gray-800 border border-gray-700 rounded-md focus:outline-none focus:border-blue-500"
            value={phaseFilter}
            onChange={(e) => setPhaseFilter(e.target.value)}
          >
            <option value="">All Phases</option>
            <option value="Planning">Planning</option>
            <option value="Hardware">Hardware</option>
            <option value="Software">Software</option>
            <option value="Training">Training</option>
            <option value="Live">Live</option>
          </select>
          <select
            className="px-4 py-2 text-gray-300 bg-gray-800 border border-gray-700 rounded-md focus:outline-none focus:border-blue-500"
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="">All Statuses</option>
            <option value="Not Started">Not Started</option>
            <option value="In Progress">In Progress</option>
            <option value="Completed">Completed</option>
          </select>
        </div>

        <div className="bg-gray-800 shadow-md rounded-lg overflow-hidden">
          <div className="px-6 py-4 border-b border-gray-700">
            <h2 className="text-xl font-semibold text-white">Store Details</h2>
          </div>
          <div className="overflow-x-auto">
            <table className="w-full text-left text-gray-300">
              <thead className="text-xs uppercase bg-gray-700 text-gray-400">
                <tr>
                  <th className="px-6 py-3 cursor-pointer" onClick={() => handleSort('storeNo')}>
                    Store Number
                    {sortColumn === 'storeNo' && (
                      <FontAwesomeIcon icon={faSort} className="ml-1" />
                    )}
                  </th>
                  <th className="px-6 py-3">Location</th>
                  <th className="px-6 py-3 cursor-pointer" onClick={() => handleSort('rolloutPhase')}>
                    Phase
                    {sortColumn === 'rolloutPhase' && (
                      <FontAwesomeIcon icon={faSort} className="ml-1" />
                    )}
                  </th>
                  <th className="px-6 py-3 cursor-pointer" onClick={() => handleSort('status')}>
                    Status
                    {sortColumn === 'status' && (
                      <FontAwesomeIcon icon={faSort} className="ml-1" />
                    )}
                  </th>
                  <th className="px-6 py-3">Actions</th>
                </tr>
              </thead>
              <tbody>
                {storesLoading ? (
                  <tr>
                    <td colSpan={5} className="px-6 py-4 text-center">Loading...</td>
                  </tr>
                ) : filteredAndSortedStores.length === 0 ? (
                  <tr>
                    <td colSpan={5} className="px-6 py-4 text-center">No stores found</td>
                  </tr>
                ) : (
                  filteredAndSortedStores.map((store) => (
                    <tr key={store.id} className="border-b border-gray-700">
                      <td className="px-6 py-4 font-medium">{store.storeNo}</td>
                      <td className="px-6 py-4">{store.address.street}</td>
                      <td className="px-6 py-4">{store.rolloutPhase}</td>
                      <td className="px-6 py-4">
                        <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${
                          store.status === 'Completed' ? 'bg-green-100 text-green-800' :
                          store.status === 'In Progress' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-red-100 text-red-800'
                        }`}>
                          {store.status}
                        </span>
                      </td>
                      <td className="px-6 py-4">
                        <Link href={`/stores/${store.id}`} className="text-blue-500 hover:text-blue-600">View</Link>
                      </td>
                    </tr>
                  ))
                )}
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </Layout>
  )
}
//*src/lib/api.ts

import { Datastore } from '@google-cloud/datastore'

const datastore = new Datastore()

export async function getStores() {
  const query = datastore.createQuery('Store')
  const [stores] = await datastore.runQuery(query)
  return stores.map(store => ({
    id: store[datastore.KEY].id,
    storeNo: store.storeNo,
    name: store.name,
    address: store.address,
    rolloutPhase: store.rolloutPhase,
    status: store.status,
    manager: store.manager,
    contactEmail: store.contactEmail,
    contactPhone: store.contactPhone,
    size: store.size,
    annualRevenue: store.annualRevenue
  }))
}

export async function getMetrics() {
  // Implement the logic to get metrics from Datastore
  // This is a placeholder implementation
  return {
    live: 10,
    onboarded: 20,
    hardwareAcquired: 15,
    softwareInstalled: 12
  }
}

export async function getStore(id: string) {
  const key = datastore.key(['Store', datastore.int(id)])
  const [store] = await datastore.get(key)
  if (!store) return null
  return {
    id: id,
    storeNo: store.storeNo,
    name: store.name,
    address: store.address,
    rolloutPhase: store.rolloutPhase,
    status: store.status,
    manager: store.manager,
    contactEmail: store.contactEmail,
    contactPhone: store.contactPhone,
    size: store.size,
    annualRevenue: store.annualRevenue
  }
}

export async function addStore(storeData: any) {
  const key = datastore.key('Store')
  const entity = {
    key: key,
    data: storeData
  }
  await datastore.save(entity)
  return entity
}

export async function getStoreStats() {
  // Implement the logic to get store stats from Datastore
  // This is a placeholder implementation
  return {
    storesByStatus: [
      { status: 'Not Started', count: 5 },
      { status: 'In Progress', count: 10 },
      { status: 'Completed', count: 15 }
    ],
    averageRolloutTime: 30
  }
}

export async function seedDatabase() {
  // Implement the logic to seed the database
  // This is a placeholder implementation
  console.log('Seeding database...')
  // Add your seeding logic here
  console.log('Database seeded successfully')
}
//*src/pages/stats.tsx

import React from 'react'
import { useQuery } from '@tanstack/react-query'
import Layout from '@/components/Layout'
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts'
import { getStoreStats } from '@/lib/api'

export default function Stats() {
  const { data: stats, isLoading, error } = useQuery({ queryKey: ['storeStats'], queryFn: getStoreStats })

  if (isLoading) return <Layout><div className="text-white">Loading...</div></Layout>
  if (error) return <Layout><div className="text-red-500">Error: {error.message}</div></Layout>

  return (
    <Layout>
      <div className="p-6 space-y-6">
        <h1 className="text-2xl font-semibold text-white">Rollout Statistics</h1>
        <div className="bg-gray-800 shadow-md rounded-lg p-6">
          <h2 className="text-xl font-semibold text-white mb-4">Stores by Status</h2>
          <ResponsiveContainer width="100%" height={300}>
            <BarChart data={stats.storesByStatus}>
              <CartesianGrid strokeDasharray="3 3" />
              <XAxis dataKey="status" />
              <YAxis />
              <Tooltip />
              <Legend />
              <Bar dataKey="count" fill="#8884d8" />
            </BarChart>
          </ResponsiveContainer>
        </div>
        <div className="bg-gray-800 shadow-md rounded-lg p-6">
          <h2 className="text-xl font-semibold text-white mb-4">Average Rollout Time</h2>
          <p className="text-3xl font-bold text-white">{stats.averageRolloutTime} days</p>
        </div>
      </div>
    </Layout>
  )
}

//*src/pages/onboard

import React from 'react'
import { useForm } from 'react-hook-form'
import { useMutation, useQueryClient } from '@tanstack/react-query'
import Layout from '@/components/Layout'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faStore, faUser, faEnvelope, faPhone, faDollarSign, faRulerCombined } from '@fortawesome/free-solid-svg-icons'
import { addStore } from '@/lib/api'

export default function OnboardStore() {
  const { register, handleSubmit, formState: { errors } } = useForm()
  const queryClient = useQueryClient()

  const mutation = useMutation({
    mutationFn: addStore,
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['stores'] })
      alert('Store added successfully!')
    },
  })

  const onSubmit = (data) => {
    mutation.mutate(data)
  }

  return (
    <Layout>
      <div className="p-6 space-y-6">
        <h1 className="text-2xl font-semibold text-white">Onboard a New Store</h1>
        <form onSubmit={handleSubmit(onSubmit)} className="bg-gray-800 shadow-md rounded-lg p-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-gray-300 mb-2" htmlFor="name">
                <FontAwesomeIcon icon={faStore} className="mr-2" />
                Store Name
              </label>
              <input
                {...register("name", { required: "Store name is required" })}
                className="w-full px-3 py-2 text-gray-300 bg-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {errors.name && <p className="text-red-500 text-sm mt-1">{errors.name.message}</p>}
            </div>
            <div>
              <label className="block text-gray-300 mb-2" htmlFor="storeNo">
                <FontAwesomeIcon icon={faStore} className="mr-2" />
                Store Number
              </label>
              <input
                {...register("storeNo", { required: "Store number is required" })}
                className="w-full px-3 py-2 text-gray-300 bg-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {errors.storeNo && <p className="text-red-500 text-sm mt-1">{errors.storeNo.message}</p>}
            </div>
            <div>
              <label className="block text-gray-300 mb-2" htmlFor="manager">
                <FontAwesomeIcon icon={faUser} className="mr-2" />
                Manager
              </label>
              <input
                {...register("manager", { required: "Manager name is required" })}
                className="w-full px-3 py-2 text-gray-300 bg-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {errors.manager && <p className="text-red-500 text-sm mt-1">{errors.manager.message}</p>}
            </div>
            <div>
              <label className="block text-gray-300 mb-2" htmlFor="contactEmail">
                <FontAwesomeIcon icon={faEnvelope} className="mr-2" />
                Contact Email
              </label>
              <input
                {...register("contactEmail", { required: "Contact email is required", pattern: /^\S+@\S+$/i })}
                className="w-full px-3 py-2 text-gray-300 bg-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {errors.contactEmail && <p className="text-red-500 text-sm mt-1">{errors.contactEmail.message}</p>}
            </div>
            <div>
              <label className="block text-gray-300 mb-2" htmlFor="contactPhone">
                <FontAwesomeIcon icon={faPhone} className="mr-2" />
                Contact Phone
              </label>
              <input
                {...register("contactPhone", { required: "Contact phone is required" })}
                className="w-full px-3 py-2 text-gray-300 bg-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {errors.contactPhone && <p className="text-red-500 text-sm mt-1">{errors.contactPhone.message}</p>}
            </div>
            <div>
              <label className="block text-gray-300 mb-2" htmlFor="size">
                <FontAwesomeIcon icon={faRulerCombined} className="mr-2" />
                Store Size (sq ft)
              </label>
              <input
                {...register("size", { required: "Store size is required", valueAsNumber: true })}
                type="number"
                className="w-full px-3 py-2 text-gray-300 bg-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {errors.size && <p className="text-red-500 text-sm mt-1">{errors.size.message}</p>}
            </div>
            <div>
              <label className="block text-gray-300 mb-2" htmlFor="annualRevenue">
                <FontAwesomeIcon icon={faDollarSign} className="mr-2" />
                Annual Revenue
              </label>
              <input
                {...register("annualRevenue", { required: "Annual revenue is required", valueAsNumber: true })}
                type="number"
                className="w-full px-3 py-2 text-gray-300 bg-gray-700 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              {errors.annualRevenue && <p className="text-red-500 text-sm mt-1">{errors.annualRevenue.message}</p>}
            </div>
          </div>
          <button
            type="submit"
            className="mt-6 w-full bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline"
          >
            Onboard Store
          </button>
        </form>
      </div>
    </Layout>
  )
}


1. Create a new Next.js app:


```shellscript
npx create-next-app@latest store-rollout-app
cd store-rollout-app
```

2. Install necessary dependencies:


```shellscript
npm install @google-cloud/datastore @tanstack/react-query react-hook-form recharts @fortawesome/fontawesome-svg-core @fortawesome/free-solid-svg-icons @fortawesome/react-fontawesome tailwindcss@latest postcss@latest autoprefixer@latest
```

3. Set up Tailwind CSS:


```shellscript
npx tailwindcss init -p
```

4. Update the `tailwind.config.js` file:


```javascript
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx}",
    "./src/components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
```

5. Update the `src/styles/globals.css` file:


```css
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 255, 255, 255;
  --background-start-rgb: 0, 0, 0;
  --background-end-rgb: 0, 0, 0;
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}
```

6. Create the necessary directories:


```shellscript
mkdir -p src/components/ui src/lib src/pages/stores
```

7. Create the component files:


```shellscript
touch src/components/Layout.tsx src/components/MetricCard.tsx
touch src/components/ui/card.tsx src/components/ui/tooltip.tsx
```

8. Create the page files:


```shellscript
touch src/pages/index.tsx src/pages/stats.tsx src/pages/onboard.tsx src/pages/seed.tsx
touch src/pages/stores/index.tsx src/pages/stores/[id].tsx
```

9. Create the utility files:


```shellscript
touch src/lib/api.ts src/lib/utils.ts
```

10. Set up Google Cloud credentials:


- Create a service account in Google Cloud Console
- Download the JSON key file
- Set the `GOOGLE_APPLICATION_CREDENTIALS` environment variable to point to this file:


```shellscript
export GOOGLE_APPLICATION_CREDENTIALS="/path/to/your/keyfile.json"
```

11. Update the `package.json` file to include the following scripts:


```json
"scripts": {
  "dev": "next dev",
  "build": "next build",
  "start": "next start",
  "lint": "next lint"
}
```
