import { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { 
  faStore, 
  faHome, 
  faEnvelope, 
  faPhone, 
  faBox,
  faTruck,
  faHouse,
  faClipboardCheck,
  faNetworkWired,
  faServer,
  faDesktop,
  faBell,
  faUsers
} from '@fortawesome/free-solid-svg-icons'

interface Task {
  id: number
  name: string
  phase: string
  team: string
  completed: boolean
  icon: any
}

const phases = ['Planning', 'Hardware', 'Software', 'Training', 'Live']
const teams = ['Infrastructure', 'Network', 'Security', 'Operations', 'Support']

const initialTasks: Task[] = [
  { id: 1, name: 'Order Hardware', phase: 'Hardware', team: 'Infrastructure', completed: true, icon: faBox },
  { id: 2, name: 'Hardware Delivered', phase: 'Hardware', team: 'Infrastructure', completed: true, icon: faTruck },
  { id: 3, name: 'Configure Network', phase: 'Software', team: 'Network', completed: true, icon: faNetworkWired },
  { id: 4, name: 'Configure Edge', phase: 'Software', team: 'Security', completed: true, icon: faServer },
  { id: 5, name: 'Deploy Edge Apps', phase: 'Software', team: 'Operations', completed: true, icon: faDesktop },
  { id: 6, name: 'Monitoring & Alerting', phase: 'Training', team: 'Support', completed: true, icon: faBell },
  { id: 7, name: 'Handover to Ops', phase: 'Live', team: 'Operations', completed: true, icon: faUsers }
]

export default function StorePage() {
  const [isEditing, setIsEditing] = useState(false)
  const [tasks, setTasks] = useState<Task[]>(initialTasks)
  const [originalTasks, setOriginalTasks] = useState<Task[]>(initialTasks)
  const router = useRouter()
  const { id } = router.query

  useEffect(() => {
    // Fetch tasks from API when the component mounts
    // This is a placeholder for the actual API call
    // setTasks(fetchedTasks)
    // setOriginalTasks(fetchedTasks)
  }, [id])

  const handlePhaseChange = (taskId: number, newPhase: string) => {
    setTasks(tasks.map(task => 
      task.id === taskId ? { ...task, phase: newPhase } : task
    ))
  }

  const handleTeamChange = (taskId: number, newTeam: string) => {
    setTasks(tasks.map(task => 
      task.id === taskId ? { ...task, team: newTeam } : task
    ))
  }

  const handleStatusChange = (taskId: number, checked: boolean) => {
    setTasks(tasks.map(task => 
      task.id === taskId ? { ...task, completed: checked } : task
    ))
  }

  const handleSubmit = async () => {
    try {
      // Placeholder for API call to update tasks
      // await updateStoreTasks(id as string, tasks)
      setOriginalTasks(tasks)
      setIsEditing(false)
    } catch (error) {
      console.error('Failed to update tasks:', error)
      // Handle error (e.g., show error message to user)
    }
  }

  const handleCancel = () => {
    setTasks(originalTasks)
    setIsEditing(false)
  }

  const completedSteps = 3 // For the progress tracker

  return (
    <div className="container mx-auto px-4 py-8">
      <div className="flex flex-col lg:flex-row gap-8">
        {/* Left Sidebar */}
        <Card className="w-full lg:w-80 bg-gray-800">
          <CardContent className="p-6 space-y-6">
            <div className="flex items-center gap-3">
              <FontAwesomeIcon icon={faStore} className="text-2xl text-blue-500" />
              <h2 className="text-2xl font-bold text-white">Store {id}</h2>
            </div>
            <div className="space-y-4 text-white">
              <div className="flex items-start gap-3">
                <FontAwesomeIcon icon={faHome} className="mt-1 text-blue-500" />
                <div>
                  <p>123 Main st</p>
                  <p>austin tx -78654</p>
                </div>
              </div>
              <div className="flex items-center gap-3">
                <FontAwesomeIcon icon={faEnvelope} className="text-blue-500" />
                <p>Jeremy@gmail.com</p>
              </div>
              <div className="flex items-center gap-3">
                <FontAwesomeIcon icon={faPhone} className="text-blue-500" />
                <p>510-555-5555</p>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Main Content */}
        <div className="flex-1 space-y-8">
          <Card>
            <CardHeader>
              <CardTitle>Store Rollout Progress</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="mb-4">
                <div className="flex justify-between text-sm mb-2">
                  <div>ORDER #V34XDHR</div>
                  <div>Expected Arrival 01/12/19</div>
                </div>
                <div className="text-xs text-gray-500">
                  USPS 234094567242423422898
                </div>
              </div>
              
              <div className="relative">
                <div className="flex justify-between mb-2">
                  {['Order Processed', 'Order Shipped', 'Order En Route', 'Order Arrived'].map((step, index) => (
                    <div key={step} className="flex flex-col items-center w-1/4">
                      <div className={`w-8 h-8 rounded-full flex items-center justify-center mb-2 
                        ${index <= completedSteps ? 'bg-blue-500 text-white' : 'bg-gray-300 text-gray-600'}`}>
                        <FontAwesomeIcon icon={
                          index === 0 ? faClipboardCheck :
                          index === 1 ? faBox :
                          index === 2 ? faTruck :
                          faHouse
                        } />
                      </div>
                      <span className="text-sm text-center">{step}</span>
                    </div>
                  ))}
                </div>
                <div className="absolute top-4 left-0 w-full h-0.5 bg-gray-300 -z-10">
                  <div 
                    className="h-full bg-blue-500 transition-all duration-500" 
                    style={{ width: `${(completedSteps / 3) * 100}%` }}
                  />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card>
            <CardHeader className="flex flex-row items-center justify-between">
              <CardTitle>Rollout Tasks</CardTitle>
              {isEditing ? (
                <div className="space-x-2">
                  <Button onClick={handleSubmit}>Submit</Button>
                  <Button onClick={handleCancel} variant="outline">Cancel</Button>
                </div>
              ) : (
                <Button onClick={() => setIsEditing(true)} variant="outline">Edit</Button>
              )}
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b">
                      <th className="px-4 py-2 text-left">Task</th>
                      <th className="px-4 py-2 text-left">Phase</th>
                      <th className="px-4 py-2 text-left">Team</th>
                      <th className="px-4 py-2 text-left">Status</th>
                    </tr>
                  </thead>
                  <tbody>
                    {tasks.map((task) => (
                      <tr key={task.id} className="border-b">
                        <td className="px-4 py-2">
                          <div className="flex items-center gap-3">
                            <FontAwesomeIcon icon={task.icon} className="text-blue-500" />
                            <span>{task.name}</span>
                          </div>
                        </td>
                        <td className="px-4 py-2">
                          <select
                            value={task.phase}
                            onChange={(e) => handlePhaseChange(task.id, e.target.value)}
                            disabled={!isEditing}
                            className="w-full border border-gray-300 rounded-md shadow-sm px-3 py-2 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                          >
                            {phases.map((phase) => (
                              <option key={phase} value={phase}>
                                {phase}
                              </option>
                            ))}
                          </select>
                        </td>
                        <td className="px-4 py-2">
                          <select
                            value={task.team}
                            onChange={(e) => handleTeamChange(task.id, e.target.value)}
                            disabled={!isEditing}
                            className="w-full border border-gray-300 rounded-md shadow-sm px-3 py-2 focus:outline-none focus:ring-1 focus:ring-blue-500 focus:border-blue-500"
                          >
                            {teams.map((team) => (
                              <option key={team} value={team}>
                                {team}
                              </option>
                            ))}
                          </select>
                        </td>
                        <td className="px-4 py-2">
                          <input
                            type="checkbox"
                            checked={task.completed}
                            onChange={(e) => handleStatusChange(task.id, e.target.checked)}
                            disabled={!isEditing}
                            className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                          />
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
