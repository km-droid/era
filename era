package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"

	"golang.org/x/oauth2/google"
)

type ClusterInfo struct {
	Field     string `json:"Field"`
	Location  string `json:"location"`
	StoreNo   string `json:"storeno"`
	Latitude  string `json:"latitude"`
	Longitude string `json:"langitude"`
}

func main() {
	ctx := context.Background()

	// Use ADC or service account for auth
	client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
	if err != nil {
		fmt.Fprintf(os.Stderr, "❌ Failed to get default client: %v\n", err)
		os.Exit(1)
	}

	projectID := os.Getenv("GOOGLE_CLOUD_PROJECT")
	if projectID == "" {
		fmt.Fprintln(os.Stderr, "❌ GOOGLE_CLOUD_PROJECT not set")
		os.Exit(1)
	}

	url := fmt.Sprintf("https://gdchardwaremanagement.googleapis.com/v1alpha/projects/%s/locations/-/zones", projectID)

	resp, err := client.Get(url)
	if err != nil {
		fmt.Fprintf(os.Stderr, "❌ Failed to call GDCE API: %v\n", err)
		os.Exit(1)
	}
	defer resp.Body.Close()

	if resp.StatusCode != 200 {
		body, _ := io.ReadAll(resp.Body)
		fmt.Fprintf(os.Stderr, "❌ API error: %s\n%s\n", resp.Status, string(body))
		os.Exit(1)
	}

	var result struct {
		Zones []struct {
			Name   string            `json:"name"`
			Labels map[string]string `json:"labels"`
		} `json:"zones"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		fmt.Fprintf(os.Stderr, "❌ Failed to parse JSON: %v\n", err)
		os.Exit(1)
	}

	var clusters []ClusterInfo
	for _, zone := range result.Zones {
		name := zone.Name
		lastPart := name[strings.LastIndex(name, "/")+1:] // extract zone ID as cluster_name

		cluster := ClusterInfo{
			Field:     "$" + lastPart,
			Location:  zone.Labels["location"],
			StoreNo:   zone.Labels["storeno"],
			Latitude:  zone.Labels["latitude"],
			Longitude: zone.Labels["longitude"],
		}
		clusters = append(clusters, cluster)
	}

	// Write to output JSON
	file, err := os.Create("gdce_zones.json")
	if err != nil {
		fmt.Fprintf(os.Stderr, "❌ Failed to create output file: %v\n", err)
		os.Exit(1)
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")
	if err := encoder.Encode(clusters); err != nil {
		fmt.Fprintf(os.Stderr, "❌ Failed to write JSON: %v\n", err)
		os.Exit(1)
	}

	fmt.Println("✅ GDCE zone data written to gdce_zones.json")
}

