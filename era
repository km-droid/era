// Bubbletea-powered Terraform Module Migrator (Wizard Style)
package main

import (
	"fmt"
	"os"
	"os/exec"
	"time"

	tea "github.com/charmbracelet/bubbletea"
	"github.com/charmbracelet/lipgloss"
)

var (
	stepTitles = []string{"Select Mode", "Enter Repo Name", "Enter Version (if updating)", "Running Migration", "Done"}
	highlightStyle = lipgloss.NewStyle().Foreground(lipgloss.Color("205"))
	normalStyle    = lipgloss.NewStyle().Foreground(lipgloss.Color("241"))
	boldStyle      = lipgloss.NewStyle().Bold(true)
)

type step int

const (
	selectMode step = iota
	enterRepo
	enterVersion
	runTasks
	done
)

type model struct {
	step           step
	mode           string // "migrate" or "update"
	repo           string
	version        string
	error          string
	done           bool
	animatedFrames []string
	frame          int
}

func initialModel() model {
	return model{
		step:           selectMode,
		animatedFrames: []string{"[   ]", "[=  ]", "[== ]", "[===]", "[ ==]", "[  =]"},
	}
}

func (m model) Init() tea.Cmd {
	return tea.Batch(tea.EnterAltScreen, tick())
}

func tick() tea.Cmd {
	return tea.Tick(time.Millisecond*120, func(t time.Time) tea.Msg {
		return tickMsg{}
	})
}

type tickMsg struct{}
type errMsg struct{ error }
type doneMsg struct{}

func (m model) Update(msg tea.Msg) (tea.Model, tea.Cmd) {
	switch msg := msg.(type) {
	case tea.KeyMsg:
		switch m.step {
		case selectMode:
			switch msg.String() {
			case "1":
				m.mode = "migrate"
				m.step = enterRepo
			case "2":
				m.mode = "update"
				m.step = enterRepo
			}
		case enterRepo:
			if msg.String() == "enter" && m.repo != "" {
				if m.mode == "update" {
					m.step = enterVersion
				} else {
					m.step = runTasks
					return m, runMigration(m)
				}
			} else {
				m.repo += msg.String()
			}
		case enterVersion:
			if msg.String() == "enter" && m.version != "" {
				m.step = runTasks
				return m, runMigration(m)
			} else {
				m.version += msg.String()
			}
		}
	case tickMsg:
		if m.step == runTasks && !m.done {
			m.frame = (m.frame + 1) % len(m.animatedFrames)
			return m, tick()
		}
	case doneMsg:
		m.step = done
		m.done = true
	}
	return m, nil
}

func runMigration(m model) tea.Cmd {
	return func() tea.Msg {
		time.Sleep(2 * time.Second) // Simulate clone
		// Real shell command could go here
		_ = exec.Command("echo", "Cloning repo:", m.repo).Run()
		time.Sleep(2 * time.Second) // Simulate scan + update
		_ = exec.Command("echo", "Mode:", m.mode, "Version:", m.version).Run()
		return doneMsg{}
	}
}

func (m model) View() string {
	s := boldStyle.Render("Terraform Module Migrator üê∏") + "\n"
	s += normalStyle.Render("Step: ") + highlightStyle.Render(stepTitles[m.step]) + "\n\n"

	switch m.step {
	case selectMode:
		s += "Choose mode:\n"
		s += "  1. Migrate Git modules to JFrog\n"
		s += "  2. Update existing JFrog module versions\n"
	case enterRepo:
		s += "Enter GitHub repo name: " + m.repo + "_"
	case enterVersion:
		s += "Enter version (e.g., 2.0): " + m.version + "_"
	case runTasks:
		s += "Running tasks...\n"
		s += m.animatedFrames[m.frame] + "\n"
	case done:
		s += "‚úÖ Done! PR has been created.\n"
		s += "üéâ Repo: " + m.repo + "\n"
		s += "üöÄ Mode: " + m.mode + "\n"
		if m.mode == "update" {
			s += "üìå Version: " + m.version + "\n"
		}
	}

	return s + "\n(Press Ctrl+C to exit)"
}

func main() {
	p := tea.NewProgram(initialModel())
	if err := p.Start(); err != nil {
		fmt.Printf("Error: %v\n", err)
		os.Exit(1)
	}
}
