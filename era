import React from 'react'
import { GetServerSideProps } from 'next'
import { useQuery } from '@tanstack/react-query'
import DashboardLayout from '@/components/DashboardLayout'
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card"
import { Bar, BarChart, ResponsiveContainer, XAxis, YAxis, Tooltip, Legend, PieChart, Pie, Cell, Treemap } from 'recharts'
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart"
import { getStoreStats } from '@/lib/api'
import { getStoreStats as getServerSideStats } from '@/lib/db'

interface StoreCountByTask {
  name: string
  completed: number
  pending: number
}

interface StoreCountByTeam {
  teamId: string
  completed: number
  pending: number
}

interface StoreStats {
  totalStores: number
  storesByStatus: { [key: string]: number }
  storesByPhase: { [key: string]: number }
}

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#8884D8', '#82CA9D']

export const getServerSideProps: GetServerSideProps = async () => {
  const initialStats = await getServerSideStats()
  return { props: { initialStats } }
}

export default function StatsPage({ initialStats }) {
  const { data: storeStats, isLoading, error } = useQuery({ 
    queryKey: ['storeStats'], 
    queryFn: getStoreStats,
    initialData: initialStats,
  })

  const [taskStats, setTaskStats] = React.useState<StoreCountByTask[]>([])
  const [teamStats, setTeamStats] = React.useState<StoreCountByTeam[]>([])

  React.useEffect(() => {
    // Fetch task stats
    fetch('/api/stats/tasks')
      .then(res => res.json())
      .then(data => setTaskStats(data))

    // Fetch team stats
    fetch('/api/stats/teams')
      .then(res => res.json())
      .then(data => setTeamStats(data))
  }, [])

  const statusChartData = React.useMemo(() => {
    if (!storeStats) return []
    return Object.entries(storeStats.storesByStatus).map(([status, count]) => ({
      name: status,
      value: count,
    }))
  }, [storeStats])

  const phaseChartData = React.useMemo(() => {
    if (!storeStats) return []
    return Object.entries(storeStats.storesByPhase).map(([phase, count]) => ({
      name: phase,
      value: count,
    }))
  }, [storeStats])

  if (isLoading) return <DashboardLayout><div>Loading...</div></DashboardLayout>
  if (error) return <DashboardLayout><div>Error loading stats</div></DashboardLayout>

  return (
    <DashboardLayout>
      <div className="space-y-6">
        <h1 className="text-2xl font-bold text-gray-800">Store Rollout Statistics</h1>

        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Total Stores</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{storeStats?.totalStores ?? 0}</div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Live Stores</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{storeStats?.storesByStatus['Live'] ?? 0}</div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Onboarded</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">{storeStats?.storesByStatus['Onboarded'] ?? 0}</div>
            </CardContent>
          </Card>
          <Card>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">Completion Rate</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold">
                {storeStats?.totalStores ? ((storeStats.storesByStatus['Live'] / storeStats.totalStores) * 100).toFixed(1) : 0}%
              </div>
            </CardContent>
          </Card>
        </div>

        <Card>
          <CardHeader>
            <CardTitle>Stores by Status</CardTitle>
            <CardDescription>Distribution of stores across different statuses</CardDescription>
          </CardHeader>
          <CardContent className="pl-2">
            <ResponsiveContainer width="100%" height={350}>
              <BarChart data={statusChartData}>
                <XAxis
                  dataKey="name"
                  stroke="#888888"
                  fontSize={12}
                  tickLine={false}
                  axisLine={false}
                />
                <YAxis
                  stroke="#888888"
                  fontSize={12}
                  tickLine={false}
                  axisLine={false}
                  tickFormatter={(value) => `${value}`}
                />
                <Bar dataKey="value" fill="#adfa1d" radius={[4, 4, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Stores by Rollout Phase</CardTitle>
            <CardDescription>Distribution of stores across different rollout phases</CardDescription>
          </CardHeader>
          <CardContent className="pl-2">
            <ResponsiveContainer width="100%" height={350}>
              <BarChart data={phaseChartData}>
                <XAxis
                  dataKey="name"
                  stroke="#888888"
                  fontSize={12}
                  tickLine={false}
                  axisLine={false}
                />
                <YAxis
                  stroke="#888888"
                  fontSize={12}
                  tickLine={false}
                  axisLine={false}
                  tickFormatter={(value) => `${value}`}
                />
                <Bar dataKey="value" fill="#22c55e" radius={[4, 4, 0, 0]} />
              </BarChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Store Count by Task Name and Status</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer
              config={{
                completed: {
                  label: "Completed",
                  color: "hsl(152, 57%, 58%)",
                },
                pending: {
                  label: "Pending",
                  color: "hsl(322, 65%, 55%)",
                },
              }}
              className="h-[400px]"
            >
              <ResponsiveContainer width="100%" height="100%">
                <BarChart data={taskStats} layout="vertical">
                  <XAxis type="number" />
                  <YAxis dataKey="name" type="category" width={150} />
                  <Tooltip content={<ChartTooltipContent />} />
                  <Legend />
                  <Bar dataKey="completed" stackId="a" fill="var(--color-completed)" />
                  <Bar dataKey="pending" stackId="a" fill="var(--color-pending)" />
                </BarChart>
              </ResponsiveContainer>
            </ChartContainer>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Store Count by Team and Status</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer
              config={{
                completed: {
                  label: "Completed",
                  color: "hsl(152, 57%, 58%)",
                },
                pending: {
                  label: "Pending",
                  color: "hsl(322, 65%, 55%)",
                },
              }}
              className="h-[400px]"
            >
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={teamStats}
                    dataKey="completed"
                    nameKey="teamId"
                    cx="50%"
                    cy="50%"
                    outerRadius={80}
                    fill="var(--color-completed)"
                    label
                  />
                  <Pie
                    data={teamStats}
                    dataKey="pending"
                    nameKey="teamId"
                    cx="50%"
                    cy="50%"
                    innerRadius={90}
                    outerRadius={110}
                    fill="var(--color-pending)"
                    label
                  />
                  <Tooltip content={<ChartTooltipContent />} />
                  <Legend />
                </PieChart>
              </ResponsiveContainer>
            </ChartContainer>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Task Completion Treemap</CardTitle>
          </CardHeader>
          <CardContent>
            <ChartContainer
              config={{
                value: {
                  label: "Stores",
                  color: "hsl(215, 79%, 51%)",
                },
              }}
              className="h-[400px]"
            >
              <ResponsiveContainer width="100%" height="100%">
                <Treemap
                  data={taskStats.map(task => ({
                    name: task.name,
                    value: task.completed + task.pending,
                    completed: task.completed,
                    pending: task.pending,
                  }))}
                  dataKey="value"
                  aspectRatio={4 / 3}
                  stroke="#fff"
                  fill="var(--color-value)"
                >
                  <Tooltip content={<CustomTreemapTooltip />} />
                </Treemap>
              </ResponsiveContainer>
            </ChartContainer>
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  )
}

const CustomTreemapTooltip = ({ active, payload }: any) => {
  if (active && payload && payload.length) {
    const data = payload[0].payload
    return (
      <Card>
        <CardContent className="p-2">
          <p className="font-bold">{data.name}</p>
          <p>Total Stores: {data.value}</p>
          <p>Completed: {data.completed}</p>
          <p>Pending: {data.pending}</p>
        </CardContent>
      </Card>
    )
  }
  return null
}
