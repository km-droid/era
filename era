// page.tsx

import ServiceHistory from './components/ServiceHistory';

export default function Home() {
  return (
    <main className="h-screen w-screen overflow-hidden">
      <ServiceHistory />
    </main>
  );
}


//layout.tsx
import './globals.css'
import { Inter } from 'next/font/google'

const inter = Inter({ subsets: ['latin'] })

export const metadata = {
  title: 'Service Traffic Change History',
  description: 'View the history of traffic changes for Google Cloud Run services',
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode
}) {
  return (
    <html lang="en">
      <body className={`${inter.className} m-0 p-0`}>{children}</body>
    </html>
  )
}


//global.css
@tailwind base;
@tailwind components;
@tailwind utilities;

html, body {
  height: 100%;
  width: 100%;
  margin: 0;
  padding: 0;
  overflow: hidden;
}

/* Customize the scrollbar for the timeline */
.timeline-main-wrapper {
  scrollbar-width: thin;
  scrollbar-color: #3182ce #e2e8f0;
}

.timeline-main-wrapper::-webkit-scrollbar {
  width: 8px;
}

.timeline-main-wrapper::-webkit-scrollbar-track {
  background: #e2e8f0;
}

.timeline-main-wrapper::-webkit-scrollbar-thumb {
  background-color: #3182ce;
  border-radius: 4px;
}


//serviceHistory.tsx
'use client';

import { Chrono } from 'react-chrono';

interface HistoryItem {
  id: string;
  service_name: string;
  revision: string;
  pct_change: number;
  user_id: string;
  timestamp: string;
}

const testData: HistoryItem[] = [
  {
    id: '1',
    service_name: 'auth-service',
    revision: 'v1.2.3',
    pct_change: 25,
    user_id: 'alice@example.com',
    timestamp: '2023-06-01T10:00:00Z',
  },
  {
    id: '2',
    service_name: 'payment-service',
    revision: 'v2.0.1',
    pct_change: -10,
    user_id: 'bob@example.com',
    timestamp: '2023-06-02T14:30:00Z',
  },
  {
    id: '3',
    service_name: 'auth-service',
    revision: 'v1.2.4',
    pct_change: 50,
    user_id: 'alice@example.com',
    timestamp: '2023-06-03T09:15:00Z',
  },
  {
    id: '4',
    service_name: 'notification-service',
    revision: 'v1.0.0',
    pct_change: 100,
    user_id: 'charlie@example.com',
    timestamp: '2023-06-04T16:45:00Z',
  },
  {
    id: '5',
    service_name: 'payment-service',
    revision: 'v2.0.2',
    pct_change: 35,
    user_id: 'bob@example.com',
    timestamp: '2023-06-05T11:20:00Z',
  },
];

export default function ServiceHistory() {
  const items = testData.map((item) => ({
    title: new Date(item.timestamp).toLocaleString(),
    cardTitle: item.service_name,
    cardSubtitle: `Revision: ${item.revision}`,
    cardDetailedText: `Traffic change: ${item.pct_change}%, User: ${item.user_id}`,
  }));

  return (
    <div className="h-screen w-screen flex flex-col">
      <h1 className="text-2xl font-bold p-4 bg-gray-100">Service Traffic Change History</h1>
      <div className="flex-grow">
        <Chrono
          items={items}
          mode="VERTICAL"
          cardHeight={150}
          slideShow
          slideItemDuration={2000}
          enableOutline
          theme={{
            primary: '#3182ce',
            secondary: '#e2e8f0',
            cardBgColor: '#ffffff',
            cardForeColor: '#1a202c',
            titleColor: '#2d3748',
          }}
        />
      </div>
    </div>
  );
}

//*route.ts
import { Datastore } from '@google-cloud/datastore';
import { NextResponse } from 'next/server';

const datastore = new Datastore();

export async function GET() {
  try {
    const query = datastore.createQuery('History').order('timestamp', { descending: true });
    const [entities] = await datastore.runQuery(query);

    const history = entities.map((entity) => ({
      id: entity[datastore.KEY].id,
      service_name: entity.service_name,
      revision: entity.revision,
      pct_change: entity.pct_change,
      user_id: entity.user_id,
      timestamp: entity.timestamp,
    }));

    return NextResponse.json(history);
  } catch (error) {
    console.error('Error fetching history:', error);
    return NextResponse.json({ error: 'Failed to fetch history' }, { status: 500 });
  }
}

