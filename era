package main

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"strings"

	"golang.org/x/oauth2/google"
)

type ClusterSummary struct {
	Field     string `json:"Field"`
	Location  string `json:"location"`
	StoreNo   string `json:"storeno"`
	Latitude  string `json:"latitude"`
	Longitude string `json:"langitude"`
}

func main() {
	ctx := context.Background()

	// Auth using ADC
	client, err := google.DefaultClient(ctx, "https://www.googleapis.com/auth/cloud-platform")
	if err != nil {
		fmt.Fprintf(os.Stderr, "❌ Failed to get default client: %v\n", err)
		os.Exit(1)
	}

	projectID := os.Getenv("GOOGLE_CLOUD_PROJECT")
	if projectID == "" {
		fmt.Fprintln(os.Stderr, "❌ GOOGLE_CLOUD_PROJECT env var not set")
		os.Exit(1)
	}

	// Fetch clusters
	url := fmt.Sprintf("https://edgecontainer.googleapis.com/v1/projects/%s/locations/-/clusters", projectID)
	resp, err := client.Get(url)
	if err != nil {
		fmt.Fprintf(os.Stderr, "❌ Failed to fetch clusters: %v\n", err)
		os.Exit(1)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		fmt.Fprintf(os.Stderr, "❌ API error %s:\n%s\n", resp.Status, string(body))
		os.Exit(1)
	}

	var result struct {
		Clusters []map[string]interface{} `json:"clusters"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&result); err != nil {
		fmt.Fprintf(os.Stderr, "❌ Failed to parse response: %v\n", err)
		os.Exit(1)
	}

	// Write full cluster details
	fullFile, err := os.Create("gdce_full_clusters.json")
	if err != nil {
		fmt.Fprintf(os.Stderr, "❌ Failed to create full JSON file: %v\n", err)
		os.Exit(1)
	}
	defer fullFile.Close()
	json.NewEncoder(fullFile).Encode(result.Clusters)

	// Build summary
	var summaries []ClusterSummary
	for _, c := range result.Clusters {
		name, _ := c["name"].(string)
		labels, _ := c["labels"].(map[string]interface{})
		summary := ClusterSummary{
			Field:     "$" + name[strings.LastIndex(name, "/")+1:],
			Location:  toString(labels["location"]),
			StoreNo:   toString(labels["storeno"]),
			Latitude:  toString(labels["latitude"]),
			Longitude: toString(labels["longitude"]),
		}
		summaries = append(summaries, summary)
	}

	// Write summary file
	summaryFile, err := os.Create("gdce_cluster_summary.json")
	if err != nil {
		fmt.Fprintf(os.Stderr, "❌ Failed to create summary JSON file: %v\n", err)
		os.Exit(1)
	}
	defer summaryFile.Close()
	json.NewEncoder(summaryFile).Encode(summaries)

	fmt.Println("✅ Output written:")
	fmt.Println(" - gdce_full_clusters.json")
	fmt.Println(" - gdce_cluster_summary.json")
}

func toString(v interface{}) string {
	if v == nil {
		return ""
	}
	return fmt.Sprintf("%v", v)
}
