
package main

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"os"
	"time"

	"golang.org/x/oauth2"
	"golang.org/x/oauth2/google"
)

// API base URL
const baseURL = "https://gdchardwaremanagement.googleapis.com/v1alpha"

type Order struct {
	FulfillmentTime string `json:"fulfillmentTime,omitempty"`
}

func getAuthorizedClient(ctx context.Context) (*http.Client, error) {
	scopes := []string{"https://www.googleapis.com/auth/cloud-platform"}
	creds, err := google.FindDefaultCredentials(ctx, scopes...)
	if err != nil {
		return nil, err
	}
	return oauth2.NewClient(ctx, creds.TokenSource), nil
}

// updateOrderFulfillmentTime updates the fulfillmentTime field of an order
func updateOrderFulfillmentTime(ctx context.Context, client *http.Client, projectID, location, orderID, fulfillmentTime string) error {
	url := fmt.Sprintf("%s/projects/%s/locations/%s/orders/%s?updateMask=fulfillment_time",
		baseURL, projectID, location, orderID)

	payload := Order{
		FulfillmentTime: fulfillmentTime,
	}
	body, err := json.Marshal(payload)
	if err != nil {
		return err
	}

	req, err := http.NewRequestWithContext(ctx, "PATCH", url, bytes.NewReader(body))
	if err != nil {
		return err
	}
	req.Header.Set("Content-Type", "application/json")

	resp, err := client.Do(req)
	if err != nil {
		return err
	}
	defer resp.Body.Close()

	if resp.StatusCode >= 200 && resp.StatusCode < 300 {
		fmt.Printf("Successfully updated fulfillmentTime for order %s\n", orderID)
		return nil
	}

	return fmt.Errorf("failed to update order: HTTP %d", resp.StatusCode)
}

func main() {
	ctx := context.Background()

	// TODO: Replace with your values
	projectID := "your-project-id"
	location := "us-central1"
	orderID := "your-order-id"

	// Example: fulfillmentTime set to 2025-08-15T12:00:00Z
	newTime := time.Date(2025, 8, 15, 12, 0, 0, 0, time.UTC).Format(time.RFC3339)

	client, err := getAuthorizedClient(ctx)
	if err != nil {
		fmt.Println("Error getting client:", err)
		os.Exit(1)
	}

	if err := updateOrderFulfillmentTime(ctx, client, projectID, location, orderID, newTime); err != nil {
		fmt.Println("Error updating fulfillmentTime:", err)
		os.Exit(1)
	}
}
