package main

import (
	"context"
	"flag"
	"fmt"
	"log"

	compute "cloud.google.com/go/compute/apiv1"
	"github.com/golang/protobuf/proto" // or "google.golang.org/protobuf/proto" in newer code
	computepb "google.golang.org/genproto/googleapis/cloud/compute/v1"
)

func main() {
	// Define command-line flags
	projectID := flag.String("project", "", "GCP project ID")
	region := flag.String("region", "", "Region of the internal HTTP(S) load balancer")
	urlMapName := flag.String("urlmap", "", "Name of the URL map to patch")

	// Define fault injection parameters as flags (optional)
	delaySeconds := flag.Int64("delay-seconds", 2, "Number of seconds to delay")
	delayPercentage := flag.Float64("delay-pct", 50, "Percentage of requests to delay")
	abortStatus := flag.Int64("abort-status", 503, "HTTP status code to inject")
	abortPercentage := flag.Float64("abort-pct", 10, "Percentage of requests to abort")

	flag.Parse()

	// Basic validation
	if *projectID == "" || *region == "" || *urlMapName == "" {
		log.Fatalf("You must provide --project, --region, and --urlmap flags.")
	}

	ctx := context.Background()

	// Create a client for interacting with the Compute Engine URL Maps API
	urlMapClient, err := compute.NewRegionUrlMapsRESTClient(ctx)
	if err != nil {
		log.Fatalf("Failed to create URL Maps client: %v", err)
	}
	defer urlMapClient.Close()

	// Build the updated UrlMap resource with fault injection
	updatedUrlMap := &computepb.UrlMap{
		Name: proto.String(*urlMapName),
		DefaultRouteAction: &computepb.HttpRouteAction{
			FaultInjectionPolicy: &computepb.HttpFaultInjection{
				Delay: &computepb.HttpFaultDelay{
					FixedDelay: &computepb.Duration{Seconds: proto.Int64(*delaySeconds)},
					Percentage: proto.Float64(*delayPercentage),
				},
				Abort: &computepb.HttpFaultAbort{
					HttpStatus: proto.Int64(*abortStatus),
					Percentage: proto.Float64(*abortPercentage),
				},
			},
		},
	}

	// Patch the existing region URL map
	op, err := urlMapClient.Patch(ctx, &computepb.PatchRegionUrlMapRequest{
		Project:        *projectID,
		Region:         *region,
		UrlMap:         *urlMapName,
		UrlMapResource: updatedUrlMap,
	})
	if err != nil {
		log.Fatalf("Patch request failed: %v", err)
	}

	// Wait for the patch operation to complete
	if err := op.Wait(ctx); err != nil {
		log.Fatalf("Error waiting for patch operation to complete: %v", err)
	}

	fmt.Println("Successfully updated URL map with fault injection settings.")
}
