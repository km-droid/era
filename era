package main

import (
	"context"
	"fmt"
	"log"
	"os"

	"cloud.google.com/go/pubsub"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/tools/clientcmd"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

var (
	projectID      = "your-google-cloud-project-id"
	subscriptionID = "your-pubsub-subscription-id"
	kubeconfigPath = "/path/to/kubeconfig" // Optional: If you want to use a custom kubeconfig file
	namespace      = "default"             // Kubernetes namespace
	labelSelector  = "app=master"          // Label selector to find the master pod
)

func main() {
	// Set up Pub/Sub client
	ctx := context.Background()
	client, err := pubsub.NewClient(ctx, projectID)
	if err != nil {
		log.Fatalf("Failed to create Pub/Sub client: %v", err)
	}

	sub := client.Subscription(subscriptionID)

	// Set up Kubernetes client
	config, err := clientcmd.BuildConfigFromFlags("", kubeconfigPath)
	if err != nil {
		log.Fatalf("Failed to build Kubernetes config: %v", err)
	}

	kubeClient, err := kubernetes.NewForConfig(config)
	if err != nil {
		log.Fatalf("Failed to create Kubernetes client: %v", err)
	}

	// Receive messages from Pub/Sub
	err = sub.Receive(ctx, func(ctx context.Context, msg *pubsub.Message) {
		fmt.Printf("Received message: %s\n", string(msg.Data))
		msg.Ack()

		// Retrieve pod name dynamically based on label
		podName, err := getPodNameByLabel(kubeClient)
		if err != nil {
			log.Printf("Failed to get pod name: %v", err)
			return
		}

		fmt.Printf("Pod Name: %s\n", podName)

		// Trigger Kubernetes Job or execute command inside the master pod
		err = runShellScriptInMasterPod(kubeClient, podName, msg.Data)
		if err != nil {
			log.Printf("Failed to trigger Kubernetes Job: %v", err)
		} else {
			log.Printf("Kubernetes Job triggered successfully.")
		}
	})

	if err != nil {
		log.Fatalf("Failed to receive Pub/Sub messages: %v", err)
	}
}

// getPodNameByLabel finds the pod by label selector and returns its name
func getPodNameByLabel(client *kubernetes.Clientset) (string, error) {
	// Get the list of pods in the specified namespace with the label selector
	pods, err := client.CoreV1().Pods(namespace).List(context.Background(), metav1.ListOptions{
		LabelSelector: labelSelector,
	})
	if err != nil {
		return "", fmt.Errorf("failed to list pods: %v", err)
	}

	if len(pods.Items) == 0 {
		return "", fmt.Errorf("no pods found with label %s", labelSelector)
	}

	// Return the first pod name
	return pods.Items[0].Name, nil
}

// runShellScriptInMasterPod executes a command inside the master pod using kubectl exec
func runShellScriptInMasterPod(client *kubernetes.Clientset, podName string, msg []byte) error {
	// Prepare the command to run the shell script
	cmd := []string{"/bin/sh", "-c", "./master_script.sh " + string(msg)}

	// Create an exec client and run the command in the master pod
	podExec := client.CoreV1().Pods(namespace).GetExecClient()

	// Execute the command inside the pod
	_, err := podExec.Pod(podName).Exec(cmd...).StreamOptions(metav1.StreamOptions{}).Execute()
	return err
}
