package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"

	container "cloud.google.com/go/container/apiv1"
	containerpb "google.golang.org/genproto/googleapis/container/v1"
)

type ClusterInfo struct {
	Field     string `json:"Field"`
	Location  string `json:"location"`
	StoreNo   string `json:"storeno"`
	Latitude  string `json:"latitude"`
	Longitude string `json:"langitude"`
}

func main() {
	ctx := context.Background()

	client, err := container.NewClusterManagerClient(ctx)
	if err != nil {
		log.Fatalf("failed to create GKE client: %v", err)
	}
	defer client.Close()

	projectID := os.Getenv("GOOGLE_CLOUD_PROJECT")
	if projectID == "" {
		log.Fatalf("GOOGLE_CLOUD_PROJECT env var not set")
	}

	req := &containerpb.ListClustersRequest{
		Parent: fmt.Sprintf("projects/%s/locations/-", projectID),
	}

	resp, err := client.ListClusters(ctx, req)
	if err != nil {
		log.Fatalf("failed to list clusters: %v", err)
	}

	var clusters []ClusterInfo
	for _, c := range resp.Clusters {
		labels := c.ResourceLabels

		cluster := ClusterInfo{
			Field:     "$" + c.Name,
			Location:  labels["location"],
			StoreNo:   labels["storeno"],
			Latitude:  labels["latitude"],
			Longitude: labels["longitude"],
		}
		clusters = append(clusters, cluster)
	}

	outFile := "clusters.json"
	file, err := os.Create(outFile)
	if err != nil {
		log.Fatalf("failed to create output file: %v", err)
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")
	if err := encoder.Encode(clusters); err != nil {
		log.Fatalf("failed to encode JSON: %v", err)
	}

	fmt.Printf("âœ… Cluster info written to %s\n", outFile)
}
