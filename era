package main

import (
    "context"
    "encoding/csv"
    "fmt"
    "log"
    "os"
    "strings"

    "golang.org/x/oauth2/google"
    dns "google.golang.org/api/dns/v1"
)

func main() {
    ctx := context.Background()

    // 1. Obtain a default client which has credentials for accessing Google Cloud DNS
    client, err := google.DefaultClient(ctx, dns.NdevClouddnsReadwriteScope)
    if err != nil {
        log.Fatalf("Failed to create client: %v", err)
    }

    // 2. Create a DNS service
    dnsService, err := dns.New(client)
    if err != nil {
        log.Fatalf("Failed to create DNS service: %v", err)
    }

    // Replace with your actual GCP Project ID
    projectID := "YOUR_PROJECT_ID"

    // 3. List all Managed Zones in the project
    managedZones, err := dnsService.ManagedZones.List(projectID).Do()
    if err != nil {
        log.Fatalf("Failed to list managed zones: %v", err)
    }

    // 4. Create or open a CSV file for writing
    csvFile, err := os.Create("dns_records.csv")
    if err != nil {
        log.Fatalf("Failed to create CSV file: %v", err)
    }
    defer csvFile.Close()

    writer := csv.NewWriter(csvFile)
    defer writer.Flush()

    // Write header row
    if err := writer.Write([]string{
        "Zone Name",
        "DNS Name",
        "Record Name",
        "Record Type",
        "TTL",
        "Record Data",
    }); err != nil {
        log.Fatalf("Failed to write CSV header: %v", err)
    }

    // 5. Iterate through each Managed Zone and list all DNS record sets
    for _, zone := range managedZones.ManagedZones {
        rrsets, err := dnsService.ResourceRecordSets.List(projectID, zone.Name).Do()
        if err != nil {
            log.Fatalf("Failed to list resource record sets for zone %s: %v", zone.Name, err)
        }

        // 5b. Write info about each DNS record to the CSV
        for _, rrset := range rrsets.Rrsets {
            // Join multiple Rrdatas (e.g., multiple IPs for an A record) with a semicolon
            recordData := strings.Join(rrset.Rrdatas, ";")

            record := []string{
                zone.Name,         // e.g. "example-zone"
                zone.DnsName,      // e.g. "example.com."
                rrset.Name,        // e.g. "sub.example.com."
                rrset.Type,        // e.g. "A" or "CNAME"
                fmt.Sprintf("%d", rrset.Ttl),
                recordData,        // e.g. "1.2.3.4" or "anotherdomain.com."
            }

            // Write a single row to the CSV
            if err := writer.Write(record); err != nil {
                log.Printf("Error writing record to CSV for zone %s: %v", zone.Name, err)
            }
        }
    }

    fmt.Println("DNS records have been written to dns_records.csv")
}
