import React, { useState, useEffect } from 'react'
import { useRouter } from 'next/router'
import Link from 'next/link'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import { faArrowLeft, faInfoCircle, faCopy, faCircle, faExternalLinkAlt, faEdit, faSave, faPlus, faTrash } from '@fortawesome/free-solid-svg-icons'
import Layout from '../../components/Layout'
import { ServiceCatalog, ServiceHealth } from '../../types'
import { Button } from '@/components/ui/button'
import { Input } from '@/components/ui/input'
import { Textarea } from '@/components/ui/textarea'

export default function AppDetails() {
  const router = useRouter()
  const { appName } = router.query

  const [activeTab, setActiveTab] = useState('overview')
  const [appDetails, setAppDetails] = useState<ServiceCatalog | null>(null)
  const [healthData, setHealthData] = useState<ServiceHealth[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [editMode, setEditMode] = useState(false)
  const [editedDetails, setEditedDetails] = useState<Partial<ServiceCatalog>>({})
  const [newLink, setNewLink] = useState({ name: '', url: '' })
  const [newDependency, setNewDependency] = useState('')

  useEffect(() => {
    if (appName && typeof appName === 'string') {
      fetchAppDetails(appName)
      fetchHealthData(appName)
    }
  }, [appName])

  const fetchAppDetails = async (appName: string) => {
    try {
      const response = await fetch(`/api/services/${appName}`)
      if (!response.ok) {
        throw new Error(`Failed to fetch app details: ${response.statusText}`)
      }
      const data = await response.json()
      if (!data.appName) {
        throw new Error('App name is missing from the API response')
      }
      if (typeof data.usefulLinks === 'string') {
        try {
          data.usefulLinks = JSON.parse(data.usefulLinks)
        } catch (e) {
          console.error('Error parsing usefulLinks:', e)
          data.usefulLinks = {}
        }
      }
      setAppDetails(data)
      setEditedDetails(data)
      setLoading(false)
    } catch (err) {
      setError(`Error fetching app details: ${err.message}`)
      setLoading(false)
    }
  }

  const fetchHealthData = async (appName: string) => {
    try {
      const response = await fetch(`/api/services/${appName}/health`)
      if (!response.ok) {
        throw new Error(`Failed to fetch health data: ${response.statusText}`)
      }
      const data = await response.json()
      setHealthData(data)
    } catch (err) {
      console.error('Error fetching health data:', err)
    }
  }

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text)
      .then(() => alert('Copied to clipboard!'))
      .catch(err => console.error('Failed to copy:', err))
  }

  const handleEdit = (key: string, value: any) => {
    setEditedDetails(prev => ({ ...prev, [key]: value }))
  }

  const handleSave = async () => {
    try {
      const response = await fetch(`/api/services/${appName}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(editedDetails),
      })
      if (!response.ok) {
        throw new Error(`Failed to update app details: ${response.statusText}`)
      }
      setAppDetails(editedDetails as ServiceCatalog)
      setEditMode(false)
    } catch (err) {
      console.error('Error updating app details:', err)
      alert('Failed to update app details. Please try again.')
    }
  }

  const handleAddLink = () => {
    if (newLink.name && newLink.url) {
      setEditedDetails(prev => ({
        ...prev,
        usefulLinks: { ...prev.usefulLinks, [newLink.name]: newLink.url }
      }))
      setNewLink({ name: '', url: '' })
    }
  }

  const handleAddDependency = () => {
    if (newDependency) {
      setEditedDetails(prev => ({
        ...prev,
        dependencies: [...(prev.dependencies || []), newDependency]
      }))
      setNewDependency('')
    }
  }

  const handleRemoveLink = (key: string) => {
    setEditedDetails(prev => {
      const newLinks = { ...prev.usefulLinks }
      delete newLinks[key]
      return { ...prev, usefulLinks: newLinks }
    })
  }

  const handleRemoveDependency = (dep: string) => {
    setEditedDetails(prev => ({
      ...prev,
      dependencies: prev.dependencies?.filter(d => d !== dep) || []
    }))
  }

  return (
    <Layout username="John Doe">
      <div className="space-y-6">
        <div className="flex items-center justify-between mb-6">
          <div className="flex items-center space-x-4">
            <Link href="/" className="text-blue-600 hover:text-blue-800 transition-colors">
              <FontAwesomeIcon icon={faArrowLeft} className="mr-2" />
              Back
            </Link>
            {loading ? (
              <h1 className="text-3xl font-bold">Loading...</h1>
            ) : error ? (
              <h1 className="text-3xl font-bold text-red-500">{error}</h1>
            ) : appDetails ? (
              <h1 className="text-3xl font-bold">{appDetails.appName}</h1>
            ) : (
              <h1 className="text-3xl font-bold text-red-500">App not found</h1>
            )}
          </div>
          {!loading && !error && appDetails && (
            <Button onClick={() => setEditMode(!editMode)}>
              <FontAwesomeIcon icon={editMode ? faSave : faEdit} className="mr-2" />
              {editMode ? 'Save' : 'Edit'}
            </Button>
          )}
        </div>

        {!loading && !error && appDetails && (
          <>
            <div className="border-b border-gray-200">
              <nav className="-mb-px flex space-x-8">
                {['Overview', 'SLOs', 'Useful Links', 'Dependencies', 'Health'].map((tab) => (
                  <button
                    key={tab}
                    onClick={() => setActiveTab(tab.toLowerCase().replace(' ', '-'))}
                    className={`${
                      activeTab === tab.toLowerCase().replace(' ', '-')
                        ? 'border-blue-500 text-blue-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
                  >
                    {tab}
                  </button>
                ))}
              </nav>
            </div>

            {activeTab === 'overview' && (
              <div className="space-y-4">
                <table className="w-full">
                  <tbody>
                    {Object.entries(editedDetails).map(([key, value]) => (
                      <tr key={key} className="hover:bg-gray-50">
                        <td className="py-2 font-medium">{key}</td>
                        <td className="py-2">
                          {editMode ? (
                            key === 'appDescription' ? (
                              <Textarea
                                value={value as string}
                                onChange={(e) => handleEdit(key, e.target.value)}
                                className="w-full"
                              />
                            ) : (
                              <Input
                                type="text"
                                value={value as string}
                                onChange={(e) => handleEdit(key, e.target.value)}
                                className="w-full"
                              />
                            )
                          ) : key === 'appDescription' || key === 'impact' ? (
                            <div className="relative group">
                              <FontAwesomeIcon icon={faInfoCircle} className="text-blue-500 cursor-pointer" />
                              <div className="absolute z-10 invisible group-hover:visible bg-white text-gray-800 p-2 rounded shadow-lg">
                                {value as string}
                              </div>
                            </div>
                          ) : Array.isArray(value) ? (
                            value.join(', ')
                          ) : typeof value === 'object' ? (
                            JSON.stringify(value)
                          ) : (
                            value as string
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}

            {activeTab === 'slos' && (
              <div className="space-y-4">
                <table className="w-full">
                  <tbody>
                    {Object.entries(editedDetails.slos || {}).map(([key, value]) => (
                      <tr key={key} className="hover:bg-gray-50">
                        <td className="py-2 font-medium">{key}</td>
                        <td className="py-2">
                          {editMode ? (
                            <Input
                              type="number"
                              value={value as number}
                              onChange={(e) => handleEdit('slos', { ...editedDetails.slos, [key]: parseFloat(e.target.value) })}
                              className="w-full"
                            />
                          ) : (
                            value
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            )}

            {activeTab === 'useful-links' && (
              <div className="space-y-4">
                <table className="w-full">
                  <thead>
                    <tr className="bg-gray-50">
                      <th className="py-2 px-4 text-left">Name</th>
                      <th className="py-2 px-4 text-left">URL</th>
                      <th className="py-2 px-4 text-left">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {Object.entries(editedDetails.usefulLinks || {}).map(([key, value]) => (
                      <tr key={key} className="hover:bg-gray-50 group">
                        <td className="py-2 px-4 font-medium">
                          {editMode ? (
                            <Input
                              type="text"
                              value={key}
                              onChange={(e) => {
                                const newLinks = { ...editedDetails.usefulLinks }
                                delete newLinks[key]
                                newLinks[e.target.value] = value
                                handleEdit('usefulLinks', newLinks)
                              }}
                              className="w-full"
                            />
                          ) : (
                            key
                          )}
                        </td>
                        <td className="py-2 px-4">
                          {editMode ? (
                            <Input
                              type="text"
                              value={value}
                              onChange={(e) => handleEdit('usefulLinks', { ...editedDetails.usefulLinks, [key]: e.target.value })}
                              className="w-full"
                            />
                          ) : (
                            <a href={value} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                              {value}
                            </a>
                          )}
                        </td>
                        <td className="py-2 px-4">
                          {editMode ? (
                            <Button onClick={() => handleRemoveLink(key)} variant="destructive" size="sm">
                              <FontAwesomeIcon icon={faTrash} />
                            </Button>
                          ) : (
                            <>
                              <button
                                onClick={() => copyToClipboard(value)}
                                className="text-gray-400 hover:text-gray-600 mr-2"
                                title="Copy to clipboard"
                              >
                                <FontAwesomeIcon icon={faCopy} />
                              </button>
                              <a
                                href={value}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="text-gray-400 hover:text-gray-600"
                                title="Open link"
                              >
                                <FontAwesomeIcon icon={faExternalLinkAlt} />
                              </a>
                            </>
                          )}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
                {editMode && (
                  <div className="flex space-x-2 mt-4">
                    <Input
                      type="text"
                      placeholder="Link Name"
                      value={newLink.name}
                      onChange={(e) => setNewLink({ ...newLink, name: e.target.value })}
                    />
                    <Input
                      type="text"
                      placeholder="Link URL"
                      value={newLink.url}
                      onChange={(e) => setNewLink({ ...newLink, url: e.target.value })}
                    />
                    <Button onClick={handleAddLink}>
                      <FontAwesomeIcon icon={faPlus} className="mr-2" />
                      Add Link
                    </Button>
                  </div>
                )}
              </div>
            )}

            {activeTab === 'dependencies' && (
              <div className="space-y-4">
                <ul>
                  {editedDetails.dependencies?.map((dep) => (
                    <li key={dep} className="flex items-center justify-between space-x-2 py-2 hover:bg-gray-50">
                      {editMode ? (
                        <>
                          <Input
                            type="text"
                            value={dep}
                            onChange={(e) => {
                              const newDeps = editedDetails.dependencies?.map(d => d === dep ? e.target.value : d)
                              handleEdit('dependencies', newDeps)
                            }}
                            className="w-full"
                          />
                          <Button onClick={() => handleRemoveDependency(dep)} variant="destructive" size="sm">
                            <FontAwesomeIcon icon={faTrash} />
                          </Button>
                        </>
                      ) : (
                        <>
                          <FontAwesomeIcon icon={faCircle} className="text-blue-500 text-xs" />
                          <span>{dep}</span>
                </>
                      )}
                    </li>
                  ))}
                </ul>
                {editMode && (
                  <div className="flex space-x-2 mt-4">
                    <Input
                      type="text"
                      placeholder="New Dependency"
                      value={newDependency}
                      onChange={(e) => setNewDependency(e.target.value)}
                    />
                    <Button onClick={handleAddDependency}>
                      <FontAwesomeIcon icon={faPlus} className="mr-2" />
                      Add Dependency
                    </Button>
                  </div>
                )}
              </div>
            )}

            {activeTab === 'health' && (
              <div className="space-y-6">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="bg-gray-100 p-4 rounded-lg">
                    <h3 className="text-lg font-semibold mb-2">Healthy</h3>
                    <div className="text-3xl font-bold text-green-500">
                      {healthData[healthData.length - 1]?.status === 'healthy' ? 'Yes' : 'No'}
                    </div>
                  </div>
                  <div className="bg-gray-100 p-4 rounded-lg">
                    <h3 className="text-lg font-semibold mb-2">Error Budget</h3>
                    <div className="text-3xl font-bold text-blue-500">
                      {healthData[healthData.length - 1]?.errorBudget.toFixed(2)}%
                    </div>
                  </div>
                </div>
                <div className="space-y-4">
                  <h3 className="text-xl font-semibold">Last 7 Days Metrics</h3>
                  <table className="w-full">
                    <thead>
                      <tr className="bg-gray-50">
                        <th className="py-2 px-4 text-left">Metric</th>
                        <th className="py-2 px-4 text-left">Value</th>
                      </tr>
                    </thead>
                    <tbody>
                      {healthData[healthData.length - 1]?.metrics && Object.entries(healthData[healthData.length - 1].metrics).map(([key, value]) => (
                        <tr key={key} className="hover:bg-gray-50">
                          <td className="py-2 px-4 font-medium">{key}</td>
                          <td className="py-2 px-4">{value}</td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
              </div>
            )}
          </>
        )}
      </div>
    </Layout>
  )
}

//*lib/api..ts
import { ServiceCatalog, ServiceHealth } from '../types'

export async function fetchAllServices(): Promise<ServiceCatalog[]> {
  const response = await fetch('/api/services')
  if (!response.ok) {
    throw new Error('Failed to fetch services')
  }
  return response.json()
}

export async function fetchServiceDetails(appName: string): Promise<ServiceCatalog> {
  const response = await fetch(`/api/services/${appName}`)
  if (!response.ok) {
    throw new Error('Failed to fetch service details')
  }
  return response.json()
}

export async function fetchServiceHealth(appName: string): Promise<ServiceHealth[]> {
  const response = await fetch(`/api/services/${appName}/health`)
  if (!response.ok) {
    throw new Error('Failed to fetch service health data')
  }
  return response.json()
}

export async function updateServiceDetails(appName: string, updatedDetails: Partial<ServiceCatalog>): Promise<ServiceCatalog> {
  const response = await fetch(`/api/services/${appName}`, {
    method: 'PUT',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(updatedDetails),
  })
  if (!response.ok) {
    throw new Error('Failed to update service details')
  }
  return response.json()
}
//*lib/db.ts
import { Datastore } from '@google-cloud/datastore'
import { ServiceCatalog, ServiceHealth } from '../types'

const datastore = new Datastore()

export async function getAllServices(): Promise<ServiceCatalog[]> {
  const query = datastore.createQuery('ServiceCatalog')
  const [services] = await datastore.runQuery(query)
  return services
}

export async function getServiceByName(appName: string): Promise<ServiceCatalog | null> {
  const key = datastore.key(['ServiceCatalog', appName])
  const [service] = await datastore.get(key)
  return service || null
}

export async function getServiceHealth(appName: string): Promise<ServiceHealth[]> {
  const query = datastore.createQuery('ServiceHealth')
    .filter('appName', '=', appName)
    .order('timestamp', { descending: true })
    .limit(7)
  const [healthData] = await datastore.runQuery(query)
  return healthData
}

export async function updateService(appName: string, updatedDetails: Partial<ServiceCatalog>): Promise<ServiceCatalog> {
  const key = datastore.key(['ServiceCatalog', appName])
  const [existingService] = await datastore.get(key)

  if (!existingService) {
    throw new Error('Service not found')
  }

  const updatedService = {
    ...existingService,
    ...updatedDetails,
    usefulLinks: JSON.stringify(updatedDetails.usefulLinks || existingService.usefulLinks),
  }

  await datastore.update({
    key: key,
    data: updatedService,
  })

  return updatedService
}

//*api/services/[appname].ts

import { NextApiRequest, NextApiResponse } from 'next'
import { getServiceByName, updateService } from '../../../lib/db'
import { ServiceCatalog } from '../../../types'

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  const { appName } = req.query

  if (typeof appName !== 'string') {
    return res.status(400).json({ error: 'Invalid appName' })
  }

  if (req.method === 'GET') {
    try {
      const service = await getServiceByName(appName)
      if (service) {
        res.status(200).json(service)
      } else {
        res.status(404).json({ error: 'Service not found' })
      }
    } catch (error) {
      console.error('Error fetching service:', error)
      res.status(500).json({ error: 'Internal server error' })
    }
  } else if (req.method === 'PUT') {
    try {
      const updatedDetails: Partial<ServiceCatalog> = req.body
      const updatedService = await updateService(appName, updatedDetails)
      res.status(200).json(updatedService)
    } catch (error) {
      console.error('Error updating service:', error)
      res.status(500).json({ error: 'Internal server error' })
    }
  } else {
    res.setHeader('Allow', ['GET', 'PUT'])
    res.status(405).end(`Method ${req.method} Not Allowed`)
  }
}

//*ui/button.ts
import React, { ButtonHTMLAttributes, forwardRef } from 'react'
import { VariantProps, cva } from 'class-variance-authority'
import { cn } from '@/lib/utils'

const buttonVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:opacity-50 disabled:pointer-events-none ring-offset-background",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive: "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline: "border border-input hover:bg-accent hover:text-accent-foreground",
        secondary: "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "underline-offset-4 hover:underline text-primary",
      },
      size: {
        default: "h-10 py-2 px-4",
        sm: "h-9 px-3 rounded-md",
        lg: "h-11 px-8 rounded-md",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    return (
      <button
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }
//*input.ts
import React, { InputHTMLAttributes, forwardRef } from 'react'
import { cn } from '@/lib/utils'

export interface InputProps extends InputHTMLAttributes<HTMLInputElement> {}

const Input = forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

//*textarea.tsx
import React, { TextareaHTMLAttributes, forwardRef } from 'react'
import { cn } from '@/lib/utils'

export interface TextareaProps extends TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

//*lib/utils.ts
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
//*
