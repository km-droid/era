package main

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"os"
	"strings"
	"sync"

	edgecontainer "cloud.google.com/go/edgecontainer/apiv1"
	edgecontainerpb "cloud.google.com/go/edgecontainer/apiv1/edgecontainerpb"
	"google.golang.org/api/iterator"
)

type ClusterInfo struct {
	StoreNumber string `json:"storeNumber"`
	ClusterName string `json:"clusterName"`
	Region      string `json:"region"`
}

type JoinedEntry struct {
	StoreNumber         string `json:"storeNumber"`
	ClusterName         string `json:"clusterName"`
	MachineID           string `json:"machineID"`
	Region              string `json:"region"`
	UptimeMetricFilter  string `json:"uptimeMetricFilter"`
}

func main() {
	ctx := context.Background()
	projectID := "your-project-id" // <-- replace with your GCP project ID
	clusterMap := make(map[string]ClusterInfo)
	regionSet := make(map[string]bool)

	// 1. Fetch all clusters
	clusterClient, err := edgecontainer.NewClient(ctx)
	if err != nil {
		log.Fatalf("Failed to create Edge Container client: %v", err)
	}
	defer clusterClient.Close()

	clusterReq := &edgecontainerpb.ListClustersRequest{
		Parent: fmt.Sprintf("projects/%s/locations/-", projectID),
	}
	clusterIt := clusterClient.ListClusters(ctx, clusterReq)
	for {
		cluster, err := clusterIt.Next()
		if err == iterator.Done {
			break
		} else if err != nil {
			log.Fatalf("Error listing clusters: %v", err)
		}

		nameParts := strings.Split(cluster.GetName(), "/")
		region := nameParts[3]
		clusterName := nameParts[len(nameParts)-1]
		storeNumber := cluster.GetLabels()["storenumber"]

		if storeNumber != "" {
			clusterMap[clusterName] = ClusterInfo{
				StoreNumber: storeNumber,
				ClusterName: clusterName,
				Region:      region,
			}
			regionSet[region] = true
		}
	}

	// 2. Fetch machines per region in parallel and join with clusters
	var wg sync.WaitGroup
	entryCh := make(chan JoinedEntry, 100)
	errCh := make(chan error, 1)

	for region := range regionSet {
		wg.Add(1)
		go func(region string) {
			defer wg.Done()
			machineReq := &edgecontainerpb.ListMachinesRequest{
				Parent: fmt.Sprintf("projects/%s/locations/%s", projectID, region),
			}
			machineIt := clusterClient.ListMachines(ctx, machineReq)
			for {
				machine, err := machineIt.Next()
				if err == iterator.Done {
					break
				} else if err != nil {
					errCh <- fmt.Errorf("error listing machines in region %s: %w", region, err)
					return
				}

				machineID := strings.Split(machine.GetName(), "/")[len(strings.Split(machine.GetName(), "/"))-1]
				clusterLabel := machine.GetLabels()["cluster"]

				if cluster, ok := clusterMap[clusterLabel]; ok {
					entryCh <- JoinedEntry{
						StoreNumber:        cluster.StoreNumber,
						ClusterName:        cluster.ClusterName,
						MachineID:          machineID,
						Region:             cluster.Region,
						UptimeMetricFilter: fmt.Sprintf("resource.label.machine_id=\"%s\"", machineID),
					}
				}
			}
		}(region)
	}

	// Close channel after all workers are done
	go func() {
		wg.Wait()
		close(entryCh)
	}()

	var result []JoinedEntry
	for {
		select {
		case entry, ok := <-entryCh:
			if !ok {
				entryCh = nil
			} else {
				result = append(result, entry)
			}
		case err := <-errCh:
			log.Fatalf("Error during processing: %v", err)
		}
		if entryCh == nil {
			break
		}
	}

	// 3. Output JSON to file
	file, err := os.Create("joined_output.json")
	if err != nil {
		log.Fatalf("Failed to create output file: %v", err)
	}
	defer file.Close()

	encoder := json.NewEncoder(file)
	encoder.SetIndent("", "  ")
	if err := encoder.Encode(result); err != nil {
		log.Fatalf("Failed to write JSON to file: %v", err)
	}

	fmt.Println("âœ… JSON written to joined_output.json")
}
